{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\alvar\\\\OneDrive\\\\Escritorio\\\\Portfolio_ArgProg-main\\\\FrontEnd\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\n\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\n * The key in Firebase config json for the storage bucket.\n */\n\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\n\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\n\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\n\nclass StorageError extends FirebaseError {\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code, message) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    /**\n     * Stores custom error data unque to StorageError.\n     */\n\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n\n\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\n   * Optional response message that was added by the server.\n   */\n\n\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n\n}\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\"\n  /* UNKNOWN */\n  , message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\"\n  /* OBJECT_NOT_FOUND */\n  , \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\"\n  /* QUOTA_EXCEEDED */\n  , \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\"\n  /* UNAUTHENTICATED */\n  , message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\"\n  /* UNAUTHORIZED_APP */\n  , 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\"\n  /* UNAUTHORIZED */\n  , \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\"\n  /* RETRY_LIMIT_EXCEEDED */\n  , 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(\"canceled\"\n  /* CANCELED */\n  , 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\"\n  /* INVALID_URL */\n  , \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\"\n  /* INVALID_DEFAULT_BUCKET */\n  , \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\"\n  /* NO_DEFAULT_BUCKET */\n  , 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\"\n  /* CANNOT_SLICE_BLOB */\n  , 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\"\n  /* SERVER_FILE_WRONG_SIZE */\n  , 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\"\n  /* NO_DOWNLOAD_URL */\n  , 'The given file does not have any download URLs.');\n}\n/**\n * @internal\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\"\n  /* INVALID_ARGUMENT */\n  , message);\n}\n\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\"\n  /* APP_DELETED */\n  , 'The Firebase app was deleted.');\n}\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\"\n  /* INVALID_ROOT_OPERATION */\n  , \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\"\n  /* INVALID_FORMAT */\n  , \"String does not match format '\" + format + \"': \" + message);\n}\n/**\n * @param message - A message describing the internal error.\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\"\n  /* INTERNAL_ERROR */\n  , 'Internal error: ' + message);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\n\n\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  get path() {\n    return this.path_;\n  }\n\n  get isRoot() {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  }\n\n}\n/**\n * A request whose promise always fails.\n */\n\n\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(_appDelete = false) {}\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  let triggeredCallback = false;\n\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success, ...args) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    const mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    let waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  let stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\n\n\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\n   * Actually starts the retry loop.\n   */\n\n\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n\n        if (!hitServer || this.isRetryStatusCode_(status)) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n\n\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  isRetryStatusCode_(status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n    408, // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n\n}\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\n\n\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n\n}\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\n\n\nfunction getBlob$1(...args) {\n  const BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\"\n      /* UNSUPPORTED_ENVIRONMENT */\n      , \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\n\n\nconst StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n}\n/**\n * @internal\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  const b = [];\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  let decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  const array = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    const middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n}\n\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\n\n\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size() {\n    return this.size_;\n  }\n\n  type() {\n    return this.type_;\n  }\n\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData() {\n    return this.data_;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\n\n\nfunction jsonObjectOrNull(s) {\n  let obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\n\n\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n}\n\nlet mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  const tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\n\n\nclass RequestInfo {\n  constructor(url, method,\n  /**\n   * Returns the value with which to resolve the request's promise. Only called\n   * if the request is successful. Throw from this function to reject the\n   * returned Request's promise with the thrown error.\n   * Note: The XhrIo passed to this function may be reused after this callback\n   * returns. Do not keep a reference to it in any way.\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\n     * Called with the current number of bytes uploaded and total size (-1 if not\n     * computable) of the request body (i.e. used to report upload progress).\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    let str = '';\n\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\n\n\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n}\n\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\n\n\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\n\n\nconst TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\n\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* RUNNING */\n    :\n    case \"pausing\"\n    /* PAUSING */\n    :\n    case \"canceling\"\n    /* CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nlet textFactoryOverride = null;\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\n\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  }\n\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  }\n\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n\n    return this.xhr_.response;\n  }\n\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n\n\n  abort() {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n\n}\n\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n\n}\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n\n}\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n\n}\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\n\n\nclass UploadTask {\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\n     * Number of bytes transferred so far.\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* RUNNING */\n    ;\n\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, () => {});\n  }\n\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n\n  _start() {\n    if (this._state !== \"running\"\n    /* RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\"\n        /* RUNNING */\n        :\n          callback(authToken, appCheckToken);\n          break;\n\n        case \"canceling\"\n        /* CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* PAUSING */\n        :\n          this._transition(\"paused\"\n          /* PAUSED */\n          );\n\n          break;\n      }\n    });\n  } // TODO(andysoto): assert false\n\n\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n\n        this._updateProgress(status.current);\n\n        this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n\n        return;\n      }\n\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n\n        this._request = undefined;\n\n        this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n\n          this._transition(\"success\"\n          /* SUCCESS */\n          );\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._updateProgress(this._blob.size());\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._errorHandler);\n    });\n  }\n\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* CANCELING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"pausing\"\n      /* PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\"\n        /* PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  }\n\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\"\n      /* PAUSING */\n      :\n        this._transition(\"paused\"\n        /* PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  }\n  /**\n   * A snapshot of the current task state.\n   */\n\n\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n\n\n  on(type, nextOrObserver, error, completed) {\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n    this._addObserver(observer);\n\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n\n\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n\n\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\n   * Adds the given observer.\n   */\n\n\n  _addObserver(observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  }\n  /**\n   * Removes the given observer.\n   */\n\n\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  _notifyObservers() {\n    this._finishPromise();\n\n    const observers = this._observers.slice();\n\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  }\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n\n\n  resume() {\n    const valid = this._state === \"paused\"\n    /* PAUSED */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* RUNNING */\n      );\n    }\n\n    return valid;\n  }\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n\n\n  pause() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* PAUSING */\n      );\n    }\n\n    return valid;\n  }\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n\n\n  cancel() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* CANCELING */\n      );\n    }\n\n    return valid;\n  }\n\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\n\n\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n\n\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\n   * A reference to the root of this object's bucket.\n   */\n\n\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n\n\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\n   * The full path of this object.\n   */\n\n\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n\n\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n\n\n  get storage() {\n    return this._service;\n  }\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n\n\n  get parent() {\n    const newPath = parent(this._location.path);\n\n    if (newPath === null) {\n      return null;\n    }\n\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n\n\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\n\n\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\n\n\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\n\n\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\n\n\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator(function* (ref, accumulator, pageToken) {\n    const opt = {\n      // maxResults is 1000 by default.\n      pageToken\n    };\n    const nextPage = yield list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n\n    if (nextPage.nextPageToken != null) {\n      yield listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n  });\n  return _listAllHelper.apply(this, arguments);\n}\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    const reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\n\n\nclass FirebaseStorageImpl {\n  constructor(\n  /**\n   * FirebaseApp associated with this StorageService instance.\n   */\n  app, _authProvider,\n  /**\n   * @internal\n   */\n  _appCheckProvider,\n  /**\n   * @internal\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\n     * This string can be in the formats:\n     * - host\n     * - host:port\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n\n\n  get host() {\n    return this._host;\n  }\n\n  set host(host) {\n    this._host = host;\n\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n\n  _getAuthToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._overrideAuthToken) {\n        return _this._overrideAuthToken;\n      }\n\n      const auth = _this._authProvider.getImmediate({\n        optional: true\n      });\n\n      if (auth) {\n        const tokenData = yield auth.getToken();\n\n        if (tokenData !== null) {\n          return tokenData.accessToken;\n        }\n      }\n\n      return null;\n    })();\n  }\n\n  _getAppCheckToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const appCheck = _this2._appCheckProvider.getImmediate({\n        optional: true\n      });\n\n      if (appCheck) {\n        const result = yield appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?\n        // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n        // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n\n        return result.token;\n      }\n\n      return null;\n    })();\n  }\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n\n\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n\n      this._requests.forEach(request => request.cancel());\n\n      this._requests.clear();\n    }\n\n    return Promise.resolve();\n  }\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n\n\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n\n\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\n\n      this._requests.add(request); // Request removes itself from set when complete.\n\n\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  makeRequestWithTokens(requestInfo, requestFactory) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const [authToken, appCheckToken] = yield Promise.all([_this3._getAuthToken(), _this3._getAppCheckToken()]);\n      return _this3._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    })();\n  }\n\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.9.9\";\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\n\nconst STORAGE_TYPE = 'storage';\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\n * @internal\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\n\n\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\n\n\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["C:/Users/alvar/OneDrive/Escritorio/Portfolio_ArgProg-main/FrontEnd/node_modules/@firebase/storage/dist/index.esm2017.js"],"names":["getApp","_getProvider","_registerComponent","registerVersion","SDK_VERSION","FirebaseError","createMockUserToken","getModularInstance","Component","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","constructor","code","message","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","_codeEquals","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","status","getStatus","isRetryStatusCode_","wasCanceled","ABORT","successCode","indexOf","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","additionalRetryCodes","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","getBytes$1","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","all","storage","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","getBytesInternal","makeRequestWithTokens","getBlobInternal","uploadBytes$1","finalMetadata","uploadBytesResumable$1","uploadString$1","listAll$1","accumulator","listAllHelper","opt","nextPage","list$1","options","op","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","add","delete","STORAGE_TYPE","getBytes","uploadBytes","uploadString","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","getStorage","bucketUrl","storageProvider","storageInstance","identifier","connectStorageEmulator","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","_FbsBlob","_Location","_TaskEvent","_TaskState","_UploadTask","_dataFromString","_invalidArgument","_invalidRootOperation"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,kBAA/B,EAAmDC,eAAnD,EAAoEC,WAApE,QAAuF,eAAvF;AACA,SAASC,aAAT,EAAwBC,mBAAxB,EAA6CC,kBAA7C,QAAuE,gBAAvE;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,gCAArB;AACA;AACA;AACA;;AACA,MAAMC,yBAAyB,GAAG,eAAlC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gCAAgC,GAAG,IAAI,EAAJ,GAAS,IAAlD;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,6BAA6B,GAAG,KAAK,EAAL,GAAU,IAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BR,aAA3B,CAAyC;AACrC;AACJ;AACA;AACA;AACA;AACIS,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACvB,UAAMC,WAAW,CAACF,IAAD,CAAjB,EAA0B,qBAAoBC,OAAQ,KAAIC,WAAW,CAACF,IAAD,CAAO,GAA5E;AACA;AACR;AACA;;AACQ,SAAKG,UAAL,GAAkB;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAlB;AACA,SAAKC,YAAL,GAAoB,KAAKJ,OAAzB,CANuB,CAOvB;AACA;;AACAK,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BT,YAAY,CAACU,SAAzC;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,WAAW,CAACT,IAAD,EAAO;AACd,WAAOE,WAAW,CAACF,IAAD,CAAX,KAAsB,KAAKA,IAAlC;AACH;AACD;AACJ;AACA;;;AACsB,MAAdI,cAAc,GAAG;AACjB,WAAO,KAAKD,UAAL,CAAgBC,cAAvB;AACH;;AACiB,MAAdA,cAAc,CAACA,cAAD,EAAiB;AAC/B,SAAKD,UAAL,CAAgBC,cAAhB,GAAiCA,cAAjC;;AACA,QAAI,KAAKD,UAAL,CAAgBC,cAApB,EAAoC;AAChC,WAAKH,OAAL,GAAgB,GAAE,KAAKI,YAAa,KAAI,KAAKF,UAAL,CAAgBC,cAAe,EAAvE;AACH,KAFD,MAGK;AACD,WAAKH,OAAL,GAAe,KAAKI,YAApB;AACH;AACJ;;AArCoC;;AAuCzC,SAASH,WAAT,CAAqBF,IAArB,EAA2B;AACvB,SAAO,aAAaA,IAApB;AACH;;AACD,SAASU,OAAT,GAAmB;AACf,QAAMT,OAAO,GAAG,mEACZ,kBADJ;AAEA,SAAO,IAAIH,YAAJ,CAAiB;AAAU;AAA3B,IAA0CG,OAA1C,CAAP;AACH;;AACD,SAASU,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,SAAO,IAAId,YAAJ,CAAiB;AAAmB;AAApC,IAA4D,aAAac,IAAb,GAAoB,mBAAhF,CAAP;AACH;;AACD,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC3B,SAAO,IAAIhB,YAAJ,CAAiB;AAAiB;AAAlC,IAAwD,uBAC3DgB,MAD2D,GAE3D,mCAF2D,GAG3D,uCAHG,CAAP;AAIH;;AACD,SAASC,eAAT,GAA2B;AACvB,QAAMd,OAAO,GAAG,mEACZ,+BADJ;AAEA,SAAO,IAAIH,YAAJ,CAAiB;AAAkB;AAAnC,IAA0DG,OAA1D,CAAP;AACH;;AACD,SAASe,eAAT,GAA2B;AACvB,SAAO,IAAIlB,YAAJ,CAAiB;AAAmB;AAApC,IAA4D,+EAA5D,CAAP;AACH;;AACD,SAASmB,YAAT,CAAsBL,IAAtB,EAA4B;AACxB,SAAO,IAAId,YAAJ,CAAiB;AAAe;AAAhC,IAAoD,8CAA8Cc,IAA9C,GAAqD,IAAzG,CAAP;AACH;;AACD,SAASM,kBAAT,GAA8B;AAC1B,SAAO,IAAIpB,YAAJ,CAAiB;AAAuB;AAAxC,IAAoE,0DAApE,CAAP;AACH;;AACD,SAASqB,QAAT,GAAoB;AAChB,SAAO,IAAIrB,YAAJ,CAAiB;AAAW;AAA5B,IAA4C,oCAA5C,CAAP;AACH;;AACD,SAASsB,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAO,IAAIvB,YAAJ,CAAiB;AAAc;AAA/B,IAAkD,kBAAkBuB,GAAlB,GAAwB,IAA1E,CAAP;AACH;;AACD,SAASC,oBAAT,CAA8BR,MAA9B,EAAsC;AAClC,SAAO,IAAIhB,YAAJ,CAAiB;AAAyB;AAA1C,IAAwE,6BAA6BgB,MAA7B,GAAsC,IAA9G,CAAP;AACH;;AACD,SAASS,eAAT,GAA2B;AACvB,SAAO,IAAIzB,YAAJ,CAAiB;AAAoB;AAArC,IAA8D,uBACjE,0BADiE,GAEjEH,yBAFiE,GAGjE,uCAHG,CAAP;AAIH;;AACD,SAAS6B,eAAT,GAA2B;AACvB,SAAO,IAAI1B,YAAJ,CAAiB;AAAoB;AAArC,IAA8D,wDAA9D,CAAP;AACH;;AACD,SAAS2B,mBAAT,GAA+B;AAC3B,SAAO,IAAI3B,YAAJ,CAAiB;AAAyB;AAA1C,IAAwE,sEAAxE,CAAP;AACH;;AACD,SAAS4B,aAAT,GAAyB;AACrB,SAAO,IAAI5B,YAAJ,CAAiB;AAAkB;AAAnC,IAA0D,iDAA1D,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAAS6B,eAAT,CAAyB1B,OAAzB,EAAkC;AAC9B,SAAO,IAAIH,YAAJ,CAAiB;AAAmB;AAApC,IAA4DG,OAA5D,CAAP;AACH;;AACD,SAAS2B,UAAT,GAAsB;AAClB,SAAO,IAAI9B,YAAJ,CAAiB;AAAc;AAA/B,IAAkD,+BAAlD,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAS+B,oBAAT,CAA8BC,IAA9B,EAAoC;AAChC,SAAO,IAAIhC,YAAJ,CAAiB;AAAyB;AAA1C,IAAwE,oBAC3EgC,IAD2E,GAE3E,+DAF2E,GAG3E,oDAHG,CAAP;AAIH;AACD;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+B/B,OAA/B,EAAwC;AACpC,SAAO,IAAIH,YAAJ,CAAiB;AAAiB;AAAlC,IAAwD,mCAAmCkC,MAAnC,GAA4C,KAA5C,GAAoD/B,OAA5G,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAASgC,aAAT,CAAuBhC,OAAvB,EAAgC;AAC5B,QAAM,IAAIH,YAAJ,CAAiB;AAAiB;AAAlC,IAAwD,qBAAqBG,OAA7E,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMiC,QAAN,CAAe;AACXnC,EAAAA,WAAW,CAACe,MAAD,EAASF,IAAT,EAAe;AACtB,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKqB,KAAL,GAAavB,IAAb;AACH;;AACO,MAAJA,IAAI,GAAG;AACP,WAAO,KAAKuB,KAAZ;AACH;;AACS,MAANC,MAAM,GAAG;AACT,WAAO,KAAKxB,IAAL,CAAUyB,MAAV,KAAqB,CAA5B;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ,UAAMC,MAAM,GAAGC,kBAAf;AACA,WAAO,QAAQD,MAAM,CAAC,KAAKzB,MAAN,CAAd,GAA8B,KAA9B,GAAsCyB,MAAM,CAAC,KAAK3B,IAAN,CAAnD;AACH;;AACD6B,EAAAA,mBAAmB,GAAG;AAClB,UAAMF,MAAM,GAAGC,kBAAf;AACA,WAAO,QAAQD,MAAM,CAAC,KAAKzB,MAAN,CAAd,GAA8B,IAArC;AACH;;AACwB,SAAlB4B,kBAAkB,CAACC,YAAD,EAAeC,IAAf,EAAqB;AAC1C,QAAIC,cAAJ;;AACA,QAAI;AACAA,MAAAA,cAAc,GAAGX,QAAQ,CAACY,WAAT,CAAqBH,YAArB,EAAmCC,IAAnC,CAAjB;AACH,KAFD,CAGA,OAAOG,CAAP,EAAU;AACN;AACA;AACA,aAAO,IAAIb,QAAJ,CAAaS,YAAb,EAA2B,EAA3B,CAAP;AACH;;AACD,QAAIE,cAAc,CAACjC,IAAf,KAAwB,EAA5B,EAAgC;AAC5B,aAAOiC,cAAP;AACH,KAFD,MAGK;AACD,YAAMvB,oBAAoB,CAACqB,YAAD,CAA1B;AACH;AACJ;;AACiB,SAAXG,WAAW,CAACzB,GAAD,EAAMuB,IAAN,EAAY;AAC1B,QAAII,QAAQ,GAAG,IAAf;AACA,UAAMC,YAAY,GAAG,qBAArB;;AACA,aAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,UAAIA,GAAG,CAACvC,IAAJ,CAASwC,MAAT,CAAgBD,GAAG,CAACvC,IAAJ,CAASyB,MAAT,GAAkB,CAAlC,MAAyC,GAA7C,EAAkD;AAC9Cc,QAAAA,GAAG,CAAChB,KAAJ,GAAYgB,GAAG,CAAChB,KAAJ,CAAUkB,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACH;AACJ;;AACD,UAAMC,MAAM,GAAG,WAAf;AACA,UAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,WAAWP,YAAX,GAA0BK,MAArC,EAA6C,GAA7C,CAAhB;AACA,UAAMG,SAAS,GAAG;AAAE3C,MAAAA,MAAM,EAAE,CAAV;AAAaF,MAAAA,IAAI,EAAE;AAAnB,KAAlB;;AACA,aAAS8C,UAAT,CAAoBP,GAApB,EAAyB;AACrBA,MAAAA,GAAG,CAAChB,KAAJ,GAAYwB,kBAAkB,CAACR,GAAG,CAACvC,IAAL,CAA9B;AACH;;AACD,UAAMgD,OAAO,GAAG,gBAAhB;AACA,UAAMC,mBAAmB,GAAGjB,IAAI,CAACkB,OAAL,CAAa,MAAb,EAAqB,KAArB,CAA5B;AACA,UAAMC,mBAAmB,GAAG,iBAA5B;AACA,UAAMC,qBAAqB,GAAG,IAAIR,MAAJ,CAAY,aAAYK,mBAAoB,IAAGD,OAAQ,MAAKX,YAAa,KAAIc,mBAAoB,EAAjG,EAAoG,GAApG,CAA9B;AACA,UAAME,sBAAsB,GAAG;AAAEnD,MAAAA,MAAM,EAAE,CAAV;AAAaF,MAAAA,IAAI,EAAE;AAAnB,KAA/B;AACA,UAAMsD,gBAAgB,GAAGtB,IAAI,KAAKlD,YAAT,GACnB,qDADmB,GAEnBkD,IAFN;AAGA,UAAMuB,gBAAgB,GAAG,UAAzB;AACA,UAAMC,kBAAkB,GAAG,IAAIZ,MAAJ,CAAY,aAAYU,gBAAiB,IAAGjB,YAAa,IAAGkB,gBAAiB,EAA7E,EAAgF,GAAhF,CAA3B;AACA,UAAME,mBAAmB,GAAG;AAAEvD,MAAAA,MAAM,EAAE,CAAV;AAAaF,MAAAA,IAAI,EAAE;AAAnB,KAA5B;AACA,UAAM0D,MAAM,GAAG,CACX;AAAEC,MAAAA,KAAK,EAAEhB,OAAT;AAAkBiB,MAAAA,OAAO,EAAEf,SAA3B;AAAsCgB,MAAAA,UAAU,EAAEvB;AAAlD,KADW,EAEX;AACIqB,MAAAA,KAAK,EAAEP,qBADX;AAEIQ,MAAAA,OAAO,EAAEP,sBAFb;AAGIQ,MAAAA,UAAU,EAAEf;AAHhB,KAFW,EAOX;AACIa,MAAAA,KAAK,EAAEH,kBADX;AAEII,MAAAA,OAAO,EAAEH,mBAFb;AAGII,MAAAA,UAAU,EAAEf;AAHhB,KAPW,CAAf;;AAaA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACjC,MAA3B,EAAmCqC,CAAC,EAApC,EAAwC;AACpC,YAAMC,KAAK,GAAGL,MAAM,CAACI,CAAD,CAApB;AACA,YAAME,QAAQ,GAAGD,KAAK,CAACJ,KAAN,CAAYM,IAAZ,CAAiBxD,GAAjB,CAAjB;;AACA,UAAIuD,QAAJ,EAAc;AACV,cAAME,WAAW,GAAGF,QAAQ,CAACD,KAAK,CAACH,OAAN,CAAc1D,MAAf,CAA5B;AACA,YAAIiE,SAAS,GAAGH,QAAQ,CAACD,KAAK,CAACH,OAAN,CAAc5D,IAAf,CAAxB;;AACA,YAAI,CAACmE,SAAL,EAAgB;AACZA,UAAAA,SAAS,GAAG,EAAZ;AACH;;AACD/B,QAAAA,QAAQ,GAAG,IAAId,QAAJ,CAAa4C,WAAb,EAA0BC,SAA1B,CAAX;AACAJ,QAAAA,KAAK,CAACF,UAAN,CAAiBzB,QAAjB;AACA;AACH;AACJ;;AACD,QAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAClB,YAAM5B,UAAU,CAACC,GAAD,CAAhB;AACH;;AACD,WAAO2B,QAAP;AACH;;AA5FU;AA+Ff;AACA;AACA;;;AACA,MAAMgC,WAAN,CAAkB;AACdjF,EAAAA,WAAW,CAACkF,KAAD,EAAQ;AACf,SAAKC,QAAL,GAAgBC,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAhB;AACH;AACD;;;AACAI,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKH,QAAZ;AACH;AACD;;;AACAI,EAAAA,MAAM,CAACC,UAAU,GAAG,KAAd,EAAqB,CAAG;;AAThB;AAYlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeC,CAAf,EACA;AACAC,QAFA,EAEUC,OAFV,EAEmB;AACf;AACA;AACA,MAAIC,WAAW,GAAG,CAAlB,CAHe,CAIf;AACA;AACA;;AACA,MAAIC,cAAc,GAAG,IAArB,CAPe,CAQf;;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIC,WAAW,GAAG,CAAlB;;AACA,WAAS7E,QAAT,GAAoB;AAChB,WAAO6E,WAAW,KAAK,CAAvB;AACH;;AACD,MAAIC,iBAAiB,GAAG,KAAxB;;AACA,WAASC,eAAT,CAAyB,GAAGC,IAA5B,EAAkC;AAC9B,QAAI,CAACF,iBAAL,EAAwB;AACpBA,MAAAA,iBAAiB,GAAG,IAApB;AACAP,MAAAA,QAAQ,CAACU,KAAT,CAAe,IAAf,EAAqBD,IAArB;AACH;AACJ;;AACD,WAASE,aAAT,CAAuBC,MAAvB,EAA+B;AAC3BT,IAAAA,cAAc,GAAGU,UAAU,CAAC,MAAM;AAC9BV,MAAAA,cAAc,GAAG,IAAjB;AACAJ,MAAAA,CAAC,CAACe,OAAD,EAAUrF,QAAQ,EAAlB,CAAD;AACH,KAH0B,EAGxBmF,MAHwB,CAA3B;AAIH;;AACD,WAASG,kBAAT,GAA8B;AAC1B,QAAIX,eAAJ,EAAqB;AACjBY,MAAAA,YAAY,CAACZ,eAAD,CAAZ;AACH;AACJ;;AACD,WAASU,OAAT,CAAiBG,OAAjB,EAA0B,GAAGR,IAA7B,EAAmC;AAC/B,QAAIF,iBAAJ,EAAuB;AACnBQ,MAAAA,kBAAkB;AAClB;AACH;;AACD,QAAIE,OAAJ,EAAa;AACTF,MAAAA,kBAAkB;AAClBP,MAAAA,eAAe,CAACU,IAAhB,CAAqB,IAArB,EAA2BD,OAA3B,EAAoC,GAAGR,IAAvC;AACA;AACH;;AACD,UAAMU,QAAQ,GAAG1F,QAAQ,MAAM4E,UAA/B;;AACA,QAAIc,QAAJ,EAAc;AACVJ,MAAAA,kBAAkB;AAClBP,MAAAA,eAAe,CAACU,IAAhB,CAAqB,IAArB,EAA2BD,OAA3B,EAAoC,GAAGR,IAAvC;AACA;AACH;;AACD,QAAIP,WAAW,GAAG,EAAlB,EAAsB;AAClB;AACAA,MAAAA,WAAW,IAAI,CAAf;AACH;;AACD,QAAIkB,UAAJ;;AACA,QAAId,WAAW,KAAK,CAApB,EAAuB;AACnBA,MAAAA,WAAW,GAAG,CAAd;AACAc,MAAAA,UAAU,GAAG,CAAb;AACH,KAHD,MAIK;AACDA,MAAAA,UAAU,GAAG,CAAClB,WAAW,GAAGmB,IAAI,CAACC,MAAL,EAAf,IAAgC,IAA7C;AACH;;AACDX,IAAAA,aAAa,CAACS,UAAD,CAAb;AACH;;AACD,MAAIG,OAAO,GAAG,KAAd;;AACA,WAASC,IAAT,CAAcC,UAAd,EAA0B;AACtB,QAAIF,OAAJ,EAAa;AACT;AACH;;AACDA,IAAAA,OAAO,GAAG,IAAV;AACAR,IAAAA,kBAAkB;;AAClB,QAAIR,iBAAJ,EAAuB;AACnB;AACH;;AACD,QAAIJ,cAAc,KAAK,IAAvB,EAA6B;AACzB,UAAI,CAACsB,UAAL,EAAiB;AACbnB,QAAAA,WAAW,GAAG,CAAd;AACH;;AACDU,MAAAA,YAAY,CAACb,cAAD,CAAZ;AACAQ,MAAAA,aAAa,CAAC,CAAD,CAAb;AACH,KAND,MAOK;AACD,UAAI,CAACc,UAAL,EAAiB;AACbnB,QAAAA,WAAW,GAAG,CAAd;AACH;AACJ;AACJ;;AACDK,EAAAA,aAAa,CAAC,CAAD,CAAb;AACAP,EAAAA,eAAe,GAAGS,UAAU,CAAC,MAAM;AAC/BR,IAAAA,UAAU,GAAG,IAAb;AACAmB,IAAAA,IAAI,CAAC,IAAD,CAAJ;AACH,GAH2B,EAGzBvB,OAHyB,CAA5B;AAIA,SAAOuB,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASA,IAAT,CAAcE,EAAd,EAAkB;AACdA,EAAAA,EAAE,CAAC,KAAD,CAAF;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AAClB,SAAOA,CAAC,KAAK,KAAK,CAAlB;AACH,C,CACD;;;AACA,SAASC,UAAT,CAAoBD,CAApB,EAAuB;AACnB,SAAO,OAAOA,CAAP,KAAa,UAApB;AACH;;AACD,SAASE,gBAAT,CAA0BF,CAA1B,EAA6B;AACzB,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAACG,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAjC;AACH;;AACD,SAASK,QAAT,CAAkBL,CAAlB,EAAqB;AACjB,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,YAAYM,MAA7C;AACH;;AACD,SAASC,YAAT,CAAsBP,CAAtB,EAAyB;AACrB,SAAOQ,mBAAmB,MAAMR,CAAC,YAAYS,IAA7C;AACH;;AACD,SAASD,mBAAT,GAA+B;AAC3B,SAAO,OAAOC,IAAP,KAAgB,WAAvB;AACH;;AACD,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsDC,KAAtD,EAA6D;AACzD,MAAIA,KAAK,GAAGF,QAAZ,EAAsB;AAClB,UAAMvG,eAAe,CAAE,sBAAqBsG,QAAS,eAAcC,QAAS,cAAvD,CAArB;AACH;;AACD,MAAIE,KAAK,GAAGD,QAAZ,EAAsB;AAClB,UAAMxG,eAAe,CAAE,sBAAqBsG,QAAS,eAAcE,QAAS,WAAvD,CAArB;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAiBC,OAAjB,EAA0B1F,IAA1B,EAAgC2F,QAAhC,EAA0C;AACtC,MAAIC,MAAM,GAAG5F,IAAb;;AACA,MAAI2F,QAAQ,IAAI,IAAhB,EAAsB;AAClBC,IAAAA,MAAM,GAAI,WAAU5F,IAAK,EAAzB;AACH;;AACD,SAAQ,GAAE2F,QAAS,MAAKC,MAAO,MAAKF,OAAQ,EAA5C;AACH;;AACD,SAASG,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAMnG,MAAM,GAAGC,kBAAf;AACA,MAAImG,SAAS,GAAG,GAAhB;;AACA,OAAK,MAAMC,GAAX,IAAkBF,MAAlB,EAA0B;AACtB,QAAIA,MAAM,CAACG,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC5B,YAAME,QAAQ,GAAGvG,MAAM,CAACqG,GAAD,CAAN,GAAc,GAAd,GAAoBrG,MAAM,CAACmG,MAAM,CAACE,GAAD,CAAP,CAA3C;AACAD,MAAAA,SAAS,GAAGA,SAAS,GAAGG,QAAZ,GAAuB,GAAnC;AACH;AACJ,GAR4B,CAS7B;;;AACAH,EAAAA,SAAS,GAAGA,SAAS,CAACtF,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACA,SAAOsF,SAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,IAAII,SAAJ;;AACA,CAAC,UAAUA,SAAV,EAAqB;AAClBA,EAAAA,SAAS,CAACA,SAAS,CAAC,UAAD,CAAT,GAAwB,CAAzB,CAAT,GAAuC,UAAvC;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,eAAD,CAAT,GAA6B,CAA9B,CAAT,GAA4C,eAA5C;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,OAAD,CAAT,GAAqB,CAAtB,CAAT,GAAoC,OAApC;AACH,CAJD,EAIGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAJZ;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,cAAN,CAAqB;AACjBjJ,EAAAA,WAAW,CAACkJ,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiCC,aAAjC,EAAgDC,qBAAhD,EAAuEC,SAAvE,EAAkFC,cAAlF,EAAkGC,QAAlG,EAA4GC,iBAA5G,EAA+HC,kBAA/H,EAAmJ;AAC1J,SAAKV,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,qBAAL,GAA6BA,qBAA7B;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAK7E,QAAL,GAAgB,IAAIC,OAAJ,CAAY,CAAC6E,OAAD,EAAU5E,MAAV,KAAqB;AAC7C,WAAK6E,QAAL,GAAgBD,OAAhB;AACA,WAAKE,OAAL,GAAe9E,MAAf;AACA,WAAK+E,MAAL;AACH,KAJe,CAAhB;AAKH;AACD;AACJ;AACA;;;AACIA,EAAAA,MAAM,GAAG;AACL,UAAMC,YAAY,GAAG,CAACC,eAAD,EAAkBlJ,QAAlB,KAA+B;AAChD,UAAIA,QAAJ,EAAc;AACVkJ,QAAAA,eAAe,CAAC,KAAD,EAAQ,IAAIC,gBAAJ,CAAqB,KAArB,EAA4B,IAA5B,EAAkC,IAAlC,CAAR,CAAf;AACA;AACH;;AACD,YAAMC,UAAU,GAAG,KAAKZ,kBAAL,EAAnB;AACA,WAAKC,kBAAL,GAA0BW,UAA1B;;AACA,YAAMC,gBAAgB,GAAGC,aAAa,IAAI;AACtC,cAAMC,MAAM,GAAGD,aAAa,CAACC,MAA7B;AACA,cAAMC,KAAK,GAAGF,aAAa,CAACG,gBAAd,GACRH,aAAa,CAACE,KADN,GAER,CAAC,CAFP;;AAGA,YAAI,KAAKjB,iBAAL,KAA2B,IAA/B,EAAqC;AACjC,eAAKA,iBAAL,CAAuBgB,MAAvB,EAA+BC,KAA/B;AACH;AACJ,OARD;;AASA,UAAI,KAAKjB,iBAAL,KAA2B,IAA/B,EAAqC;AACjCa,QAAAA,UAAU,CAACM,yBAAX,CAAqCL,gBAArC;AACH,OAlB+C,CAmBhD;AACA;;;AACAD,MAAAA,UAAU,CACLO,IADL,CACU,KAAK7B,IADf,EACqB,KAAKC,OAD1B,EACmC,KAAKE,KADxC,EAC+C,KAAKD,QADpD,EAEK4B,IAFL,CAEU,MAAM;AACZ,YAAI,KAAKrB,iBAAL,KAA2B,IAA/B,EAAqC;AACjCa,UAAAA,UAAU,CAACS,4BAAX,CAAwCR,gBAAxC;AACH;;AACD,aAAKZ,kBAAL,GAA0B,IAA1B;AACA,cAAMqB,SAAS,GAAGV,UAAU,CAACW,YAAX,OAA8BnC,SAAS,CAACoC,QAA1D;AACA,cAAMC,MAAM,GAAGb,UAAU,CAACc,SAAX,EAAf;;AACA,YAAI,CAACJ,SAAD,IAAc,KAAKK,kBAAL,CAAwBF,MAAxB,CAAlB,EAAmD;AAC/C,gBAAMG,WAAW,GAAGhB,UAAU,CAACW,YAAX,OAA8BnC,SAAS,CAACyC,KAA5D;AACAnB,UAAAA,eAAe,CAAC,KAAD,EAAQ,IAAIC,gBAAJ,CAAqB,KAArB,EAA4B,IAA5B,EAAkCiB,WAAlC,CAAR,CAAf;AACA;AACH;;AACD,cAAME,WAAW,GAAG,KAAKpC,aAAL,CAAmBqC,OAAnB,CAA2BN,MAA3B,MAAuC,CAAC,CAA5D;AACAf,QAAAA,eAAe,CAAC,IAAD,EAAO,IAAIC,gBAAJ,CAAqBmB,WAArB,EAAkClB,UAAlC,CAAP,CAAf;AACH,OAhBD;AAiBH,KAtCD;AAuCA;AACR;AACA;AACA;;;AACQ,UAAMoB,WAAW,GAAG,CAACC,kBAAD,EAAqBR,MAArB,KAAgC;AAChD,YAAMpB,OAAO,GAAG,KAAKC,QAArB;AACA,YAAM7E,MAAM,GAAG,KAAK8E,OAApB;AACA,YAAMK,UAAU,GAAGa,MAAM,CAACb,UAA1B;;AACA,UAAIa,MAAM,CAACS,cAAX,EAA2B;AACvB,YAAI;AACA,gBAAMC,MAAM,GAAG,KAAKvC,SAAL,CAAegB,UAAf,EAA2BA,UAAU,CAACwB,WAAX,EAA3B,CAAf;;AACA,cAAI1E,SAAS,CAACyE,MAAD,CAAb,EAAuB;AACnB9B,YAAAA,OAAO,CAAC8B,MAAD,CAAP;AACH,WAFD,MAGK;AACD9B,YAAAA,OAAO;AACV;AACJ,SARD,CASA,OAAOjH,CAAP,EAAU;AACNqC,UAAAA,MAAM,CAACrC,CAAD,CAAN;AACH;AACJ,OAbD,MAcK;AACD,YAAIwH,UAAU,KAAK,IAAnB,EAAyB;AACrB,gBAAMyB,GAAG,GAAGtL,OAAO,EAAnB;AACAsL,UAAAA,GAAG,CAAC5L,cAAJ,GAAqBmK,UAAU,CAAC0B,YAAX,EAArB;;AACA,cAAI,KAAKzC,cAAT,EAAyB;AACrBpE,YAAAA,MAAM,CAAC,KAAKoE,cAAL,CAAoBe,UAApB,EAAgCyB,GAAhC,CAAD,CAAN;AACH,WAFD,MAGK;AACD5G,YAAAA,MAAM,CAAC4G,GAAD,CAAN;AACH;AACJ,SATD,MAUK;AACD,cAAIZ,MAAM,CAACjK,QAAX,EAAqB;AACjB,kBAAM6K,GAAG,GAAG,KAAKjC,UAAL,GAAkBnI,UAAU,EAA5B,GAAiCT,QAAQ,EAArD;AACAiE,YAAAA,MAAM,CAAC4G,GAAD,CAAN;AACH,WAHD,MAIK;AACD,kBAAMA,GAAG,GAAG9K,kBAAkB,EAA9B;AACAkE,YAAAA,MAAM,CAAC4G,GAAD,CAAN;AACH;AACJ;AACJ;AACJ,KAxCD;;AAyCA,QAAI,KAAKlC,SAAT,EAAoB;AAChB6B,MAAAA,WAAW,CAAC,KAAD,EAAQ,IAAIrB,gBAAJ,CAAqB,KAArB,EAA4B,IAA5B,EAAkC,IAAlC,CAAR,CAAX;AACH,KAFD,MAGK;AACD,WAAKT,UAAL,GAAkBrE,KAAK,CAAC4E,YAAD,EAAeuB,WAAf,EAA4B,KAAKlC,QAAjC,CAAvB;AACH;AACJ;AACD;;;AACApE,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKH,QAAZ;AACH;AACD;;;AACAI,EAAAA,MAAM,CAAC4G,SAAD,EAAY;AACd,SAAKpC,SAAL,GAAiB,IAAjB;AACA,SAAKC,UAAL,GAAkBmC,SAAS,IAAI,KAA/B;;AACA,QAAI,KAAKrC,UAAL,KAAoB,IAAxB,EAA8B;AAC1B3C,MAAAA,IAAI,CAAC,KAAK2C,UAAN,CAAJ;AACH;;AACD,QAAI,KAAKD,kBAAL,KAA4B,IAAhC,EAAsC;AAClC,WAAKA,kBAAL,CAAwBuC,KAAxB;AACH;AACJ;;AACDb,EAAAA,kBAAkB,CAACF,MAAD,EAAS;AACvB;AACA;AACA,UAAMgB,iBAAiB,GAAGhB,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAApD;AACA,UAAMiB,eAAe,GAAG,CACpB;AACA,OAFoB,EAGpB;AACA,OAJoB,CAAxB;AAMA,UAAMC,gBAAgB,GAAGD,eAAe,CAACX,OAAhB,CAAwBN,MAAxB,MAAoC,CAAC,CAA9D;AACA,UAAMmB,0BAA0B,GAAG,KAAKjD,qBAAL,CAA2BoC,OAA3B,CAAmCN,MAAnC,MAA+C,CAAC,CAAnF;AACA,WAAOgB,iBAAiB,IAAIE,gBAArB,IAAyCC,0BAAhD;AACH;;AAlJgB;AAoJrB;AACA;AACA;AACA;;;AACA,MAAMjC,gBAAN,CAAuB;AACnBvK,EAAAA,WAAW,CAAC8L,cAAD,EAAiBtB,UAAjB,EAA6BpJ,QAA7B,EAAuC;AAC9C,SAAK0K,cAAL,GAAsBA,cAAtB;AACA,SAAKtB,UAAL,GAAkBA,UAAlB;AACA,SAAKpJ,QAAL,GAAgB,CAAC,CAACA,QAAlB;AACH;;AALkB;;AAOvB,SAASqL,cAAT,CAAwBC,OAAxB,EAAiCC,SAAjC,EAA4C;AACxC,MAAIA,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACrK,MAAV,GAAmB,CAA7C,EAAgD;AAC5CoK,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,cAAcC,SAAzC;AACH;AACJ;;AACD,SAASC,iBAAT,CAA2BF,OAA3B,EAAoCG,eAApC,EAAqD;AACjDH,EAAAA,OAAO,CAAC,4BAAD,CAAP,GACI,YAAYG,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyDA,eAAzD,GAA2E,YAAvF,CADJ;AAEH;;AACD,SAASC,eAAT,CAAyBJ,OAAzB,EAAkCK,KAAlC,EAAyC;AACrC,MAAIA,KAAJ,EAAW;AACPL,IAAAA,OAAO,CAAC,kBAAD,CAAP,GAA8BK,KAA9B;AACH;AACJ;;AACD,SAASC,kBAAT,CAA4BN,OAA5B,EAAqCO,aAArC,EAAoD;AAChD,MAAIA,aAAa,KAAK,IAAtB,EAA4B;AACxBP,IAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCO,aAAjC;AACH;AACJ;;AACD,SAASC,WAAT,CAAqBC,WAArB,EAAkCJ,KAAlC,EAAyCJ,SAAzC,EAAoDM,aAApD,EAAmEG,cAAnE,EAAmFP,eAAnF,EAAoG;AAChG,QAAMjE,SAAS,GAAGF,eAAe,CAACyE,WAAW,CAACE,SAAb,CAAjC;AACA,QAAM/L,GAAG,GAAG6L,WAAW,CAAC7L,GAAZ,GAAkBsH,SAA9B;AACA,QAAM8D,OAAO,GAAGnM,MAAM,CAAC+M,MAAP,CAAc,EAAd,EAAkBH,WAAW,CAACT,OAA9B,CAAhB;AACAI,EAAAA,eAAe,CAACJ,OAAD,EAAUK,KAAV,CAAf;AACAN,EAAAA,cAAc,CAACC,OAAD,EAAUC,SAAV,CAAd;AACAC,EAAAA,iBAAiB,CAACF,OAAD,EAAUG,eAAV,CAAjB;AACAG,EAAAA,kBAAkB,CAACN,OAAD,EAAUO,aAAV,CAAlB;AACA,SAAO,IAAIhE,cAAJ,CAAmB3H,GAAnB,EAAwB6L,WAAW,CAACI,MAApC,EAA4Cb,OAA5C,EAAqDS,WAAW,CAACK,IAAjE,EAAuEL,WAAW,CAACM,YAAnF,EAAiGN,WAAW,CAACO,oBAA7G,EAAmIP,WAAW,CAAC1G,OAA/I,EAAwJ0G,WAAW,CAACQ,YAApK,EAAkLR,WAAW,CAACvH,OAA9L,EAAuMuH,WAAW,CAACS,gBAAnN,EAAqOR,cAArO,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,cAAT,GAA0B;AACtB,MAAI,OAAOC,WAAP,KAAuB,WAA3B,EAAwC;AACpC,WAAOA,WAAP;AACH,GAFD,MAGK,IAAI,OAAOC,iBAAP,KAA6B,WAAjC,EAA8C;AAC/C,WAAOA,iBAAP;AACH,GAFI,MAGA;AACD,WAAOC,SAAP;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmB,GAAG7H,IAAtB,EAA4B;AACxB,QAAM0H,WAAW,GAAGD,cAAc,EAAlC;;AACA,MAAIC,WAAW,KAAKE,SAApB,EAA+B;AAC3B,UAAME,EAAE,GAAG,IAAIJ,WAAJ,EAAX;;AACA,SAAK,IAAInJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,IAAI,CAAC9D,MAAzB,EAAiCqC,CAAC,EAAlC,EAAsC;AAClCuJ,MAAAA,EAAE,CAACC,MAAH,CAAU/H,IAAI,CAACzB,CAAD,CAAd;AACH;;AACD,WAAOuJ,EAAE,CAACE,OAAH,EAAP;AACH,GAND,MAOK;AACD,QAAIrG,mBAAmB,EAAvB,EAA2B;AACvB,aAAO,IAAIC,IAAJ,CAAS5B,IAAT,CAAP;AACH,KAFD,MAGK;AACD,YAAM,IAAIrG,YAAJ,CAAiB;AAA0B;AAA3C,QAA0E,qDAA1E,CAAN;AACH;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsO,SAAT,CAAmBC,IAAnB,EAAyB7I,KAAzB,EAAgC8I,GAAhC,EAAqC;AACjC,MAAID,IAAI,CAACE,WAAT,EAAsB;AAClB,WAAOF,IAAI,CAACE,WAAL,CAAiB/I,KAAjB,EAAwB8I,GAAxB,CAAP;AACH,GAFD,MAGK,IAAID,IAAI,CAACG,QAAT,EAAmB;AACpB,WAAOH,IAAI,CAACG,QAAL,CAAchJ,KAAd,EAAqB8I,GAArB,CAAP;AACH,GAFI,MAGA,IAAID,IAAI,CAAChL,KAAT,EAAgB;AACjB,WAAOgL,IAAI,CAAChL,KAAL,CAAWmC,KAAX,EAAkB8I,GAAlB,CAAP;AACH;;AACD,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,SAAOC,IAAI,CAACD,OAAD,CAAX;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAME,YAAY,GAAG;AACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,GAAG,EAAE,KARY;;AASjB;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,MAAM,EAAE,QAfS;;AAgBjB;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,SAAS,EAAE,WAtBM;;AAuBjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,QAAQ,EAAE;AAhCO,CAArB;;AAkCA,MAAMC,UAAN,CAAiB;AACblP,EAAAA,WAAW,CAACmP,IAAD,EAAOC,WAAP,EAAoB;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAW,IAAI,IAAlC;AACH;;AAJY;AAMjB;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBpN,MAAxB,EAAgCqN,UAAhC,EAA4C;AACxC,UAAQrN,MAAR;AACI,SAAK4M,YAAY,CAACC,GAAlB;AACI,aAAO,IAAII,UAAJ,CAAeK,UAAU,CAACD,UAAD,CAAzB,CAAP;;AACJ,SAAKT,YAAY,CAACE,MAAlB;AACA,SAAKF,YAAY,CAACG,SAAlB;AACI,aAAO,IAAIE,UAAJ,CAAeM,YAAY,CAACvN,MAAD,EAASqN,UAAT,CAA3B,CAAP;;AACJ,SAAKT,YAAY,CAACI,QAAlB;AACI,aAAO,IAAIC,UAAJ,CAAeO,aAAa,CAACH,UAAD,CAA5B,EAA0CI,mBAAmB,CAACJ,UAAD,CAA7D,CAAP;AACJ;AARJ,GADwC,CAWxC;;;AACA,QAAM3O,OAAO,EAAb;AACH;;AACD,SAAS4O,UAAT,CAAoBlH,KAApB,EAA2B;AACvB,QAAMsH,CAAC,GAAG,EAAV;;AACA,OAAK,IAAIhL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0D,KAAK,CAAC/F,MAA1B,EAAkCqC,CAAC,EAAnC,EAAuC;AACnC,QAAIiL,CAAC,GAAGvH,KAAK,CAACwH,UAAN,CAAiBlL,CAAjB,CAAR;;AACA,QAAIiL,CAAC,IAAI,GAAT,EAAc;AACVD,MAAAA,CAAC,CAACG,IAAF,CAAOF,CAAP;AACH,KAFD,MAGK;AACD,UAAIA,CAAC,IAAI,IAAT,EAAe;AACXD,QAAAA,CAAC,CAACG,IAAF,CAAO,MAAOF,CAAC,IAAI,CAAnB,EAAuB,MAAOA,CAAC,GAAG,EAAlC;AACH,OAFD,MAGK;AACD,YAAI,CAACA,CAAC,GAAG,KAAL,MAAgB,KAApB,EAA2B;AACvB;AACA,gBAAMG,KAAK,GAAGpL,CAAC,GAAG0D,KAAK,CAAC/F,MAAN,GAAe,CAAnB,IAAwB,CAAC+F,KAAK,CAACwH,UAAN,CAAiBlL,CAAC,GAAG,CAArB,IAA0B,KAA3B,MAAsC,KAA5E;;AACA,cAAI,CAACoL,KAAL,EAAY;AACR;AACAJ,YAAAA,CAAC,CAACG,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;AACH,WAHD,MAIK;AACD,kBAAME,EAAE,GAAGJ,CAAX;AACA,kBAAMK,EAAE,GAAG5H,KAAK,CAACwH,UAAN,CAAiB,EAAElL,CAAnB,CAAX;AACAiL,YAAAA,CAAC,GAAG,QAAS,CAACI,EAAE,GAAG,IAAN,KAAe,EAAxB,GAA+BC,EAAE,GAAG,IAAxC;AACAN,YAAAA,CAAC,CAACG,IAAF,CAAO,MAAOF,CAAC,IAAI,EAAnB,EAAwB,MAAQA,CAAC,IAAI,EAAN,GAAY,EAA3C,EAAgD,MAAQA,CAAC,IAAI,CAAN,GAAW,EAAlE,EAAuE,MAAOA,CAAC,GAAG,EAAlF;AACH;AACJ,SAbD,MAcK;AACD,cAAI,CAACA,CAAC,GAAG,KAAL,MAAgB,KAApB,EAA2B;AACvB;AACAD,YAAAA,CAAC,CAACG,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;AACH,WAHD,MAIK;AACDH,YAAAA,CAAC,CAACG,IAAF,CAAO,MAAOF,CAAC,IAAI,EAAnB,EAAwB,MAAQA,CAAC,IAAI,CAAN,GAAW,EAA1C,EAA+C,MAAOA,CAAC,GAAG,EAA1D;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,SAAO,IAAIM,UAAJ,CAAeP,CAAf,CAAP;AACH;;AACD,SAASQ,oBAAT,CAA8B9H,KAA9B,EAAqC;AACjC,MAAI+H,OAAJ;;AACA,MAAI;AACAA,IAAAA,OAAO,GAAGxM,kBAAkB,CAACyE,KAAD,CAA5B;AACH,GAFD,CAGA,OAAOrF,CAAP,EAAU;AACN,UAAMhB,aAAa,CAAC6M,YAAY,CAACI,QAAd,EAAwB,qBAAxB,CAAnB;AACH;;AACD,SAAOM,UAAU,CAACa,OAAD,CAAjB;AACH;;AACD,SAASZ,YAAT,CAAsBvN,MAAtB,EAA8BoG,KAA9B,EAAqC;AACjC,UAAQpG,MAAR;AACI,SAAK4M,YAAY,CAACE,MAAlB;AAA0B;AACtB,cAAMsB,QAAQ,GAAGhI,KAAK,CAACsD,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAzC;AACA,cAAM2E,QAAQ,GAAGjI,KAAK,CAACsD,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAzC;;AACA,YAAI0E,QAAQ,IAAIC,QAAhB,EAA0B;AACtB,gBAAMC,WAAW,GAAGF,QAAQ,GAAG,GAAH,GAAS,GAArC;AACA,gBAAMrO,aAAa,CAACC,MAAD,EAAS,wBACxBsO,WADwB,GAExB,mCAFe,CAAnB;AAGH;;AACD;AACH;;AACD,SAAK1B,YAAY,CAACG,SAAlB;AAA6B;AACzB,cAAMwB,OAAO,GAAGnI,KAAK,CAACsD,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAxC;AACA,cAAM8E,QAAQ,GAAGpI,KAAK,CAACsD,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAzC;;AACA,YAAI6E,OAAO,IAAIC,QAAf,EAAyB;AACrB,gBAAMF,WAAW,GAAGC,OAAO,GAAG,GAAH,GAAS,GAApC;AACA,gBAAMxO,aAAa,CAACC,MAAD,EAAS,wBAAwBsO,WAAxB,GAAsC,gCAA/C,CAAnB;AACH;;AACDlI,QAAAA,KAAK,GAAGA,KAAK,CAACtE,OAAN,CAAc,IAAd,EAAoB,GAApB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAAR;AACA;AACH;AACD;AAtBJ;;AAwBA,MAAI2M,KAAJ;;AACA,MAAI;AACAA,IAAAA,KAAK,GAAGhC,YAAY,CAACrG,KAAD,CAApB;AACH,GAFD,CAGA,OAAOrF,CAAP,EAAU;AACN,UAAMhB,aAAa,CAACC,MAAD,EAAS,yBAAT,CAAnB;AACH;;AACD,QAAM0O,KAAK,GAAG,IAAIT,UAAJ,CAAeQ,KAAK,CAACpO,MAArB,CAAd;;AACA,OAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+L,KAAK,CAACpO,MAA1B,EAAkCqC,CAAC,EAAnC,EAAuC;AACnCgM,IAAAA,KAAK,CAAChM,CAAD,CAAL,GAAW+L,KAAK,CAACb,UAAN,CAAiBlL,CAAjB,CAAX;AACH;;AACD,SAAOgM,KAAP;AACH;;AACD,MAAMC,YAAN,CAAmB;AACf5Q,EAAAA,WAAW,CAAC6Q,OAAD,EAAU;AACjB,SAAKC,MAAL,GAAc,KAAd;AACA,SAAK1B,WAAL,GAAmB,IAAnB;AACA,UAAM2B,OAAO,GAAGF,OAAO,CAACG,KAAR,CAAc,iBAAd,CAAhB;;AACA,QAAID,OAAO,KAAK,IAAhB,EAAsB;AAClB,YAAM/O,aAAa,CAAC6M,YAAY,CAACI,QAAd,EAAwB,uDAAxB,CAAnB;AACH;;AACD,UAAMgC,MAAM,GAAGF,OAAO,CAAC,CAAD,CAAP,IAAc,IAA7B;;AACA,QAAIE,MAAM,IAAI,IAAd,EAAoB;AAChB,WAAKH,MAAL,GAAcI,QAAQ,CAACD,MAAD,EAAS,SAAT,CAAtB;AACA,WAAK7B,WAAL,GAAmB,KAAK0B,MAAL,GACbG,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBF,MAAM,CAAC3O,MAAP,GAAgB,UAAUA,MAA9C,CADa,GAEb2O,MAFN;AAGH;;AACD,SAAKG,IAAL,GAAYP,OAAO,CAACM,SAAR,CAAkBN,OAAO,CAAClF,OAAR,CAAgB,GAAhB,IAAuB,CAAzC,CAAZ;AACH;;AAhBc;;AAkBnB,SAAS8D,aAAT,CAAuB4B,OAAvB,EAAgC;AAC5B,QAAMC,KAAK,GAAG,IAAIV,YAAJ,CAAiBS,OAAjB,CAAd;;AACA,MAAIC,KAAK,CAACR,MAAV,EAAkB;AACd,WAAOtB,YAAY,CAACX,YAAY,CAACE,MAAd,EAAsBuC,KAAK,CAACF,IAA5B,CAAnB;AACH,GAFD,MAGK;AACD,WAAOjB,oBAAoB,CAACmB,KAAK,CAACF,IAAP,CAA3B;AACH;AACJ;;AACD,SAAS1B,mBAAT,CAA6B2B,OAA7B,EAAsC;AAClC,QAAMC,KAAK,GAAG,IAAIV,YAAJ,CAAiBS,OAAjB,CAAd;AACA,SAAOC,KAAK,CAAClC,WAAb;AACH;;AACD,SAAS8B,QAAT,CAAkBK,CAAlB,EAAqBhD,GAArB,EAA0B;AACtB,QAAMiD,UAAU,GAAGD,CAAC,CAACjP,MAAF,IAAYiM,GAAG,CAACjM,MAAnC;;AACA,MAAI,CAACkP,UAAL,EAAiB;AACb,WAAO,KAAP;AACH;;AACD,SAAOD,CAAC,CAACJ,SAAF,CAAYI,CAAC,CAACjP,MAAF,GAAWiM,GAAG,CAACjM,MAA3B,MAAuCiM,GAA9C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMkD,OAAN,CAAc;AACVzR,EAAAA,WAAW,CAACmP,IAAD,EAAOuC,SAAP,EAAkB;AACzB,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAI9J,YAAY,CAACqH,IAAD,CAAhB,EAAwB;AACpB,WAAK0C,KAAL,GAAa1C,IAAb;AACAwC,MAAAA,IAAI,GAAGxC,IAAI,CAACwC,IAAZ;AACAC,MAAAA,QAAQ,GAAGzC,IAAI,CAAC2C,IAAhB;AACH,KAJD,MAKK,IAAI3C,IAAI,YAAY4C,WAApB,EAAiC;AAClC,UAAIL,SAAJ,EAAe;AACX,aAAKG,KAAL,GAAa,IAAI3B,UAAJ,CAAef,IAAf,CAAb;AACH,OAFD,MAGK;AACD,aAAK0C,KAAL,GAAa,IAAI3B,UAAJ,CAAef,IAAI,CAAC6C,UAApB,CAAb;AACA,aAAKH,KAAL,CAAWI,GAAX,CAAe,IAAI/B,UAAJ,CAAef,IAAf,CAAf;AACH;;AACDwC,MAAAA,IAAI,GAAG,KAAKE,KAAL,CAAWvP,MAAlB;AACH,KATI,MAUA,IAAI6M,IAAI,YAAYe,UAApB,EAAgC;AACjC,UAAIwB,SAAJ,EAAe;AACX,aAAKG,KAAL,GAAa1C,IAAb;AACH,OAFD,MAGK;AACD,aAAK0C,KAAL,GAAa,IAAI3B,UAAJ,CAAef,IAAI,CAAC7M,MAApB,CAAb;AACA,aAAKuP,KAAL,CAAWI,GAAX,CAAe9C,IAAf;AACH;;AACDwC,MAAAA,IAAI,GAAGxC,IAAI,CAAC7M,MAAZ;AACH;;AACD,SAAK4P,KAAL,GAAaP,IAAb;AACA,SAAKQ,KAAL,GAAaP,QAAb;AACH;;AACDD,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKO,KAAZ;AACH;;AACDJ,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKK,KAAZ;AACH;;AACD7O,EAAAA,KAAK,CAAC8O,SAAD,EAAYC,OAAZ,EAAqB;AACtB,QAAIvK,YAAY,CAAC,KAAK+J,KAAN,CAAhB,EAA8B;AAC1B,YAAMS,QAAQ,GAAG,KAAKT,KAAtB;AACA,YAAMU,MAAM,GAAGlE,SAAS,CAACiE,QAAD,EAAWF,SAAX,EAAsBC,OAAtB,CAAxB;;AACA,UAAIE,MAAM,KAAK,IAAf,EAAqB;AACjB,eAAO,IAAP;AACH;;AACD,aAAO,IAAId,OAAJ,CAAYc,MAAZ,CAAP;AACH,KAPD,MAQK;AACD,YAAMjP,KAAK,GAAG,IAAI4M,UAAJ,CAAe,KAAK2B,KAAL,CAAWW,MAA1B,EAAkCJ,SAAlC,EAA6CC,OAAO,GAAGD,SAAvD,CAAd;AACA,aAAO,IAAIX,OAAJ,CAAYnO,KAAZ,EAAmB,IAAnB,CAAP;AACH;AACJ;;AACa,SAAP8K,OAAO,CAAC,GAAGhI,IAAJ,EAAU;AACpB,QAAI2B,mBAAmB,EAAvB,EAA2B;AACvB,YAAM0K,MAAM,GAAGrM,IAAI,CAACsM,GAAL,CAAUC,GAAD,IAAS;AAC7B,YAAIA,GAAG,YAAYlB,OAAnB,EAA4B;AACxB,iBAAOkB,GAAG,CAACd,KAAX;AACH,SAFD,MAGK;AACD,iBAAOc,GAAP;AACH;AACJ,OAPc,CAAf;AAQA,aAAO,IAAIlB,OAAJ,CAAYxD,SAAS,CAAC5H,KAAV,CAAgB,IAAhB,EAAsBoM,MAAtB,CAAZ,CAAP;AACH,KAVD,MAWK;AACD,YAAMG,WAAW,GAAGxM,IAAI,CAACsM,GAAL,CAAUC,GAAD,IAAS;AAClC,YAAI/K,QAAQ,CAAC+K,GAAD,CAAZ,EAAmB;AACf,iBAAOtD,cAAc,CAACR,YAAY,CAACC,GAAd,EAAmB6D,GAAnB,CAAd,CAAsCxD,IAA7C;AACH,SAFD,MAGK;AACD;AACA,iBAAOwD,GAAG,CAACd,KAAX;AACH;AACJ,OARmB,CAApB;AASA,UAAIgB,WAAW,GAAG,CAAlB;AACAD,MAAAA,WAAW,CAACE,OAAZ,CAAqBnC,KAAD,IAAW;AAC3BkC,QAAAA,WAAW,IAAIlC,KAAK,CAACqB,UAArB;AACH,OAFD;AAGA,YAAMe,MAAM,GAAG,IAAI7C,UAAJ,CAAe2C,WAAf,CAAf;AACA,UAAIG,KAAK,GAAG,CAAZ;AACAJ,MAAAA,WAAW,CAACE,OAAZ,CAAqBnC,KAAD,IAAW;AAC3B,aAAK,IAAIhM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgM,KAAK,CAACrO,MAA1B,EAAkCqC,CAAC,EAAnC,EAAuC;AACnCoO,UAAAA,MAAM,CAACC,KAAK,EAAN,CAAN,GAAkBrC,KAAK,CAAChM,CAAD,CAAvB;AACH;AACJ,OAJD;AAKA,aAAO,IAAI8M,OAAJ,CAAYsB,MAAZ,EAAoB,IAApB,CAAP;AACH;AACJ;;AACDE,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKpB,KAAZ;AACH;;AA1FS;AA6Fd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASqB,gBAAT,CAA0B3B,CAA1B,EAA6B;AACzB,MAAI4B,GAAJ;;AACA,MAAI;AACAA,IAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW9B,CAAX,CAAN;AACH,GAFD,CAGA,OAAOvO,CAAP,EAAU;AACN,WAAO,IAAP;AACH;;AACD,MAAIyE,gBAAgB,CAAC0L,GAAD,CAApB,EAA2B;AACvB,WAAOA,GAAP;AACH,GAFD,MAGK;AACD,WAAO,IAAP;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASG,MAAT,CAAgBzS,IAAhB,EAAsB;AAClB,MAAIA,IAAI,CAACyB,MAAL,KAAgB,CAApB,EAAuB;AACnB,WAAO,IAAP;AACH;;AACD,QAAM0Q,KAAK,GAAGnS,IAAI,CAAC0S,WAAL,CAAiB,GAAjB,CAAd;;AACA,MAAIP,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,WAAO,EAAP;AACH;;AACD,QAAMQ,OAAO,GAAG3S,IAAI,CAACyC,KAAL,CAAW,CAAX,EAAc0P,KAAd,CAAhB;AACA,SAAOQ,OAAP;AACH;;AACD,SAASC,KAAT,CAAe5S,IAAf,EAAqB6S,SAArB,EAAgC;AAC5B,QAAMC,kBAAkB,GAAGD,SAAS,CAC/BE,KADsB,CAChB,GADgB,EAEtBC,MAFsB,CAEfC,SAAS,IAAIA,SAAS,CAACxR,MAAV,GAAmB,CAFjB,EAGtByR,IAHsB,CAGjB,GAHiB,CAA3B;;AAIA,MAAIlT,IAAI,CAACyB,MAAL,KAAgB,CAApB,EAAuB;AACnB,WAAOqR,kBAAP;AACH,GAFD,MAGK;AACD,WAAO9S,IAAI,GAAG,GAAP,GAAa8S,kBAApB;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,aAAT,CAAuBnT,IAAvB,EAA6B;AACzB,QAAMmS,KAAK,GAAGnS,IAAI,CAAC0S,WAAL,CAAiB,GAAjB,EAAsB1S,IAAI,CAACyB,MAAL,GAAc,CAApC,CAAd;;AACA,MAAI0Q,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,WAAOnS,IAAP;AACH,GAFD,MAGK;AACD,WAAOA,IAAI,CAACyC,KAAL,CAAW0P,KAAK,GAAG,CAAnB,CAAP;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,QAAT,CAAkBC,QAAlB,EAA4B7L,KAA5B,EAAmC;AAC/B,SAAOA,KAAP;AACH;;AACD,MAAM8L,OAAN,CAAc;AACVnU,EAAAA,WAAW,CAACoU,MAAD,EAASC,KAAT,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiC;AACxC,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAK,IAAID,MAAtB;AACA,SAAKE,QAAL,GAAgB,CAAC,CAACA,QAAlB;AACA,SAAKC,KAAL,GAAaA,KAAK,IAAIN,QAAtB;AACH;;AANS;;AAQd,IAAIO,SAAS,GAAG,IAAhB;;AACA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,MAAI,CAAC9M,QAAQ,CAAC8M,QAAD,CAAT,IAAuBA,QAAQ,CAACpS,MAAT,GAAkB,CAA7C,EAAgD;AAC5C,WAAOoS,QAAP;AACH,GAFD,MAGK;AACD,WAAOV,aAAa,CAACU,QAAD,CAApB;AACH;AACJ;;AACD,SAASC,WAAT,GAAuB;AACnB,MAAIH,SAAJ,EAAe;AACX,WAAOA,SAAP;AACH;;AACD,QAAMI,QAAQ,GAAG,EAAjB;AACAA,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,QAAZ,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,YAAZ,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,gBAAZ,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,MAAZ,EAAoB,UAApB,EAAgC,IAAhC,CAAd;;AACA,WAASU,iBAAT,CAA2BC,SAA3B,EAAsCJ,QAAtC,EAAgD;AAC5C,WAAOD,SAAS,CAACC,QAAD,CAAhB;AACH;;AACD,QAAMK,WAAW,GAAG,IAAIZ,OAAJ,CAAY,MAAZ,CAApB;AACAY,EAAAA,WAAW,CAACR,KAAZ,GAAoBM,iBAApB;AACAD,EAAAA,QAAQ,CAAC9E,IAAT,CAAciF,WAAd;AACA;AACJ;AACA;;AACI,WAASC,SAAT,CAAmBF,SAAnB,EAA8BnD,IAA9B,EAAoC;AAChC,QAAIA,IAAI,KAAK3D,SAAb,EAAwB;AACpB,aAAOiH,MAAM,CAACtD,IAAD,CAAb;AACH,KAFD,MAGK;AACD,aAAOA,IAAP;AACH;AACJ;;AACD,QAAMuD,WAAW,GAAG,IAAIf,OAAJ,CAAY,MAAZ,CAApB;AACAe,EAAAA,WAAW,CAACX,KAAZ,GAAoBS,SAApB;AACAJ,EAAAA,QAAQ,CAAC9E,IAAT,CAAcoF,WAAd;AACAN,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,aAAZ,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,SAAZ,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,SAAZ,EAAuB,IAAvB,EAA6B,IAA7B,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,cAAZ,EAA4B,IAA5B,EAAkC,IAAlC,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,oBAAZ,EAAkC,IAAlC,EAAwC,IAAxC,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,iBAAZ,EAA+B,IAA/B,EAAqC,IAArC,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,iBAAZ,EAA+B,IAA/B,EAAqC,IAArC,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,aAAZ,EAA2B,IAA3B,EAAiC,IAAjC,CAAd;AACAS,EAAAA,QAAQ,CAAC9E,IAAT,CAAc,IAAIqE,OAAJ,CAAY,UAAZ,EAAwB,gBAAxB,EAA0C,IAA1C,CAAd;AACAK,EAAAA,SAAS,GAAGI,QAAZ;AACA,SAAOJ,SAAP;AACH;;AACD,SAASW,MAAT,CAAgBjB,QAAhB,EAA0BkB,OAA1B,EAAmC;AAC/B,WAASC,WAAT,GAAuB;AACnB,UAAMtU,MAAM,GAAGmT,QAAQ,CAAC,QAAD,CAAvB;AACA,UAAMrT,IAAI,GAAGqT,QAAQ,CAAC,UAAD,CAArB;AACA,UAAM9Q,GAAG,GAAG,IAAIjB,QAAJ,CAAapB,MAAb,EAAqBF,IAArB,CAAZ;AACA,WAAOuU,OAAO,CAACE,qBAAR,CAA8BlS,GAA9B,CAAP;AACH;;AACD7C,EAAAA,MAAM,CAACgV,cAAP,CAAsBrB,QAAtB,EAAgC,KAAhC,EAAuC;AAAEsB,IAAAA,GAAG,EAAEH;AAAP,GAAvC;AACH;;AACD,SAASI,YAAT,CAAsBL,OAAtB,EAA+BM,QAA/B,EAAyCd,QAAzC,EAAmD;AAC/C,QAAMV,QAAQ,GAAG,EAAjB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACA,QAAMyB,GAAG,GAAGf,QAAQ,CAACtS,MAArB;;AACA,OAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgR,GAApB,EAAyBhR,CAAC,EAA1B,EAA8B;AAC1B,UAAMiR,OAAO,GAAGhB,QAAQ,CAACjQ,CAAD,CAAxB;AACAuP,IAAAA,QAAQ,CAAC0B,OAAO,CAACvB,KAAT,CAAR,GAA0BuB,OAAO,CAACrB,KAAR,CAAcL,QAAd,EAAwBwB,QAAQ,CAACE,OAAO,CAACxB,MAAT,CAAhC,CAA1B;AACH;;AACDe,EAAAA,MAAM,CAACjB,QAAD,EAAWkB,OAAX,CAAN;AACA,SAAOlB,QAAP;AACH;;AACD,SAAS2B,kBAAT,CAA4BT,OAA5B,EAAqCU,cAArC,EAAqDlB,QAArD,EAA+D;AAC3D,QAAMzB,GAAG,GAAGD,gBAAgB,CAAC4C,cAAD,CAA5B;;AACA,MAAI3C,GAAG,KAAK,IAAZ,EAAkB;AACd,WAAO,IAAP;AACH;;AACD,QAAMuC,QAAQ,GAAGvC,GAAjB;AACA,SAAOsC,YAAY,CAACL,OAAD,EAAUM,QAAV,EAAoBd,QAApB,CAAnB;AACH;;AACD,SAASmB,6BAAT,CAAuC7B,QAAvC,EAAiD4B,cAAjD,EAAiEjT,IAAjE,EAAuE2F,QAAvE,EAAiF;AAC7E,QAAM2K,GAAG,GAAGD,gBAAgB,CAAC4C,cAAD,CAA5B;;AACA,MAAI3C,GAAG,KAAK,IAAZ,EAAkB;AACd,WAAO,IAAP;AACH;;AACD,MAAI,CAACvL,QAAQ,CAACuL,GAAG,CAAC,gBAAD,CAAJ,CAAb,EAAsC;AAClC;AACA;AACA,WAAO,IAAP;AACH;;AACD,QAAM6C,MAAM,GAAG7C,GAAG,CAAC,gBAAD,CAAlB;;AACA,MAAI6C,MAAM,CAAC1T,MAAP,KAAkB,CAAtB,EAAyB;AACrB,WAAO,IAAP;AACH;;AACD,QAAME,MAAM,GAAGC,kBAAf;AACA,QAAMwT,UAAU,GAAGD,MAAM,CAACpC,KAAP,CAAa,GAAb,CAAnB;AACA,QAAMsC,IAAI,GAAGD,UAAU,CAACvD,GAAX,CAAgByD,KAAD,IAAW;AACnC,UAAMpV,MAAM,GAAGmT,QAAQ,CAAC,QAAD,CAAvB;AACA,UAAMrT,IAAI,GAAGqT,QAAQ,CAAC,UAAD,CAArB;AACA,UAAM3L,OAAO,GAAG,QAAQ/F,MAAM,CAACzB,MAAD,CAAd,GAAyB,KAAzB,GAAiCyB,MAAM,CAAC3B,IAAD,CAAvD;AACA,UAAMuV,IAAI,GAAG9N,OAAO,CAACC,OAAD,EAAU1F,IAAV,EAAgB2F,QAAhB,CAApB;AACA,UAAM6N,WAAW,GAAG3N,eAAe,CAAC;AAChC4N,MAAAA,GAAG,EAAE,OAD2B;AAEhCH,MAAAA;AAFgC,KAAD,CAAnC;AAIA,WAAOC,IAAI,GAAGC,WAAd;AACH,GAVY,CAAb;AAWA,SAAOH,IAAI,CAAC,CAAD,CAAX;AACH;;AACD,SAASK,gBAAT,CAA0BrC,QAA1B,EAAoCU,QAApC,EAA8C;AAC1C,QAAMc,QAAQ,GAAG,EAAjB;AACA,QAAMC,GAAG,GAAGf,QAAQ,CAACtS,MAArB;;AACA,OAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgR,GAApB,EAAyBhR,CAAC,EAA1B,EAA8B;AAC1B,UAAMiR,OAAO,GAAGhB,QAAQ,CAACjQ,CAAD,CAAxB;;AACA,QAAIiR,OAAO,CAACtB,QAAZ,EAAsB;AAClBoB,MAAAA,QAAQ,CAACE,OAAO,CAACxB,MAAT,CAAR,GAA2BF,QAAQ,CAAC0B,OAAO,CAACvB,KAAT,CAAnC;AACH;AACJ;;AACD,SAAOjB,IAAI,CAACoD,SAAL,CAAed,QAAf,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMe,YAAY,GAAG,UAArB;AACA,MAAMC,SAAS,GAAG,OAAlB;;AACA,SAASC,mBAAT,CAA6BvB,OAA7B,EAAsCrU,MAAtC,EAA8C2U,QAA9C,EAAwD;AACpD,QAAMkB,UAAU,GAAG;AACfC,IAAAA,QAAQ,EAAE,EADK;AAEfC,IAAAA,KAAK,EAAE,EAFQ;AAGfC,IAAAA,aAAa,EAAErB,QAAQ,CAAC,eAAD;AAHR,GAAnB;;AAKA,MAAIA,QAAQ,CAACe,YAAD,CAAZ,EAA4B;AACxB,SAAK,MAAM5V,IAAX,IAAmB6U,QAAQ,CAACe,YAAD,CAA3B,EAA2C;AACvC,YAAMO,wBAAwB,GAAGnW,IAAI,CAACkD,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAjC;;AACA,YAAMkT,SAAS,GAAG7B,OAAO,CAACE,qBAAR,CAA8B,IAAInT,QAAJ,CAAapB,MAAb,EAAqBiW,wBAArB,CAA9B,CAAlB;;AACAJ,MAAAA,UAAU,CAACC,QAAX,CAAoB/G,IAApB,CAAyBmH,SAAzB;AACH;AACJ;;AACD,MAAIvB,QAAQ,CAACgB,SAAD,CAAZ,EAAyB;AACrB,SAAK,MAAMQ,IAAX,IAAmBxB,QAAQ,CAACgB,SAAD,CAA3B,EAAwC;AACpC,YAAMO,SAAS,GAAG7B,OAAO,CAACE,qBAAR,CAA8B,IAAInT,QAAJ,CAAapB,MAAb,EAAqBmW,IAAI,CAAC,MAAD,CAAzB,CAA9B,CAAlB;;AACAN,MAAAA,UAAU,CAACE,KAAX,CAAiBhH,IAAjB,CAAsBmH,SAAtB;AACH;AACJ;;AACD,SAAOL,UAAP;AACH;;AACD,SAASO,kBAAT,CAA4B/B,OAA5B,EAAqCrU,MAArC,EAA6C+U,cAA7C,EAA6D;AACzD,QAAM3C,GAAG,GAAGD,gBAAgB,CAAC4C,cAAD,CAA5B;;AACA,MAAI3C,GAAG,KAAK,IAAZ,EAAkB;AACd,WAAO,IAAP;AACH;;AACD,QAAMuC,QAAQ,GAAGvC,GAAjB;AACA,SAAOwD,mBAAmB,CAACvB,OAAD,EAAUrU,MAAV,EAAkB2U,QAAlB,CAA1B;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM0B,WAAN,CAAkB;AACdpX,EAAAA,WAAW,CAACsB,GAAD,EAAMiM,MAAN;AACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACI9G,EAAAA,OARW,EAQFb,OARE,EAQO;AACd,SAAKtE,GAAL,GAAWA,GAAX;AACA,SAAKiM,MAAL,GAAcA,MAAd;AACA,SAAK9G,OAAL,GAAeA,OAAf;AACA,SAAKb,OAAL,GAAeA,OAAf;AACA,SAAKyH,SAAL,GAAiB,EAAjB;AACA,SAAKX,OAAL,GAAe,EAAf;AACA,SAAKc,IAAL,GAAY,IAAZ;AACA,SAAKG,YAAL,GAAoB,IAApB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKH,YAAL,GAAoB,CAAC,GAAD,CAApB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACH;;AAzBa;AA4BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAAS2J,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,MAAI,CAACA,IAAL,EAAW;AACP,UAAM3W,OAAO,EAAb;AACH;AACJ;;AACD,SAAS4W,eAAT,CAAyBnC,OAAzB,EAAkCR,QAAlC,EAA4C;AACxC,WAASnO,OAAT,CAAiB+Q,GAAjB,EAAsBC,IAAtB,EAA4B;AACxB,UAAMvD,QAAQ,GAAG2B,kBAAkB,CAACT,OAAD,EAAUqC,IAAV,EAAgB7C,QAAhB,CAAnC;AACAyC,IAAAA,YAAY,CAACnD,QAAQ,KAAK,IAAd,CAAZ;AACA,WAAOA,QAAP;AACH;;AACD,SAAOzN,OAAP;AACH;;AACD,SAASiR,WAAT,CAAqBtC,OAArB,EAA8BrU,MAA9B,EAAsC;AAClC,WAAS0F,OAAT,CAAiB+Q,GAAjB,EAAsBC,IAAtB,EAA4B;AACxB,UAAMb,UAAU,GAAGO,kBAAkB,CAAC/B,OAAD,EAAUrU,MAAV,EAAkB0W,IAAlB,CAArC;AACAJ,IAAAA,YAAY,CAACT,UAAU,KAAK,IAAhB,CAAZ;AACA,WAAOA,UAAP;AACH;;AACD,SAAOnQ,OAAP;AACH;;AACD,SAASkR,kBAAT,CAA4BvC,OAA5B,EAAqCR,QAArC,EAA+C;AAC3C,WAASnO,OAAT,CAAiB+Q,GAAjB,EAAsBC,IAAtB,EAA4B;AACxB,UAAMvD,QAAQ,GAAG2B,kBAAkB,CAACT,OAAD,EAAUqC,IAAV,EAAgB7C,QAAhB,CAAnC;AACAyC,IAAAA,YAAY,CAACnD,QAAQ,KAAK,IAAd,CAAZ;AACA,WAAO6B,6BAA6B,CAAC7B,QAAD,EAAWuD,IAAX,EAAiBrC,OAAO,CAACvS,IAAzB,EAA+BuS,OAAO,CAACwC,SAAvC,CAApC;AACH;;AACD,SAAOnR,OAAP;AACH;;AACD,SAASoR,kBAAT,CAA4B5U,QAA5B,EAAsC;AAClC,WAAS0K,YAAT,CAAsB6J,GAAtB,EAA2BvL,GAA3B,EAAgC;AAC5B,QAAI6L,MAAJ;;AACA,QAAIN,GAAG,CAAClM,SAAJ,OAAoB,GAAxB,EAA6B;AACzB,WACA;AACA;AACAkM,MAAAA,GAAG,CAACtL,YAAJ,GAAmB6L,QAAnB,CAA4B,qCAA5B,CAHA,EAGoE;AAChED,QAAAA,MAAM,GAAG7W,eAAe,EAAxB;AACH,OALD,MAMK;AACD6W,QAAAA,MAAM,GAAG9W,eAAe,EAAxB;AACH;AACJ,KAVD,MAWK;AACD,UAAIwW,GAAG,CAAClM,SAAJ,OAAoB,GAAxB,EAA6B;AACzBwM,QAAAA,MAAM,GAAGhX,aAAa,CAACmC,QAAQ,CAAClC,MAAV,CAAtB;AACH,OAFD,MAGK;AACD,YAAIyW,GAAG,CAAClM,SAAJ,OAAoB,GAAxB,EAA6B;AACzBwM,UAAAA,MAAM,GAAG5W,YAAY,CAAC+B,QAAQ,CAACpC,IAAV,CAArB;AACH,SAFD,MAGK;AACDiX,UAAAA,MAAM,GAAG7L,GAAT;AACH;AACJ;AACJ;;AACD6L,IAAAA,MAAM,CAACzX,cAAP,GAAwB4L,GAAG,CAAC5L,cAA5B;AACA,WAAOyX,MAAP;AACH;;AACD,SAAOnK,YAAP;AACH;;AACD,SAASqK,kBAAT,CAA4B/U,QAA5B,EAAsC;AAClC,QAAMgV,MAAM,GAAGJ,kBAAkB,CAAC5U,QAAD,CAAjC;;AACA,WAAS0K,YAAT,CAAsB6J,GAAtB,EAA2BvL,GAA3B,EAAgC;AAC5B,QAAI6L,MAAM,GAAGG,MAAM,CAACT,GAAD,EAAMvL,GAAN,CAAnB;;AACA,QAAIuL,GAAG,CAAClM,SAAJ,OAAoB,GAAxB,EAA6B;AACzBwM,MAAAA,MAAM,GAAGlX,cAAc,CAACqC,QAAQ,CAACpC,IAAV,CAAvB;AACH;;AACDiX,IAAAA,MAAM,CAACzX,cAAP,GAAwB4L,GAAG,CAAC5L,cAA5B;AACA,WAAOyX,MAAP;AACH;;AACD,SAAOnK,YAAP;AACH;;AACD,SAASuK,aAAT,CAAuB9C,OAAvB,EAAgCnS,QAAhC,EAA0C2R,QAA1C,EAAoD;AAChD,QAAMrM,OAAO,GAAGtF,QAAQ,CAACV,aAAT,EAAhB;AACA,QAAMjB,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,KAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAAC+C,qBAAxB;AACA,QAAMhL,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6BgK,eAAe,CAACnC,OAAD,EAAUR,QAAV,CAA5C,EAAiEhP,OAAjE,CAApB;AACAuH,EAAAA,WAAW,CAACQ,YAAZ,GAA2BqK,kBAAkB,CAAC/U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;;AACD,SAASiL,MAAT,CAAgBhD,OAAhB,EAAyBnS,QAAzB,EAAmCoV,SAAnC,EAA8CC,SAA9C,EAAyDC,UAAzD,EAAqE;AACjE,QAAMlL,SAAS,GAAG,EAAlB;;AACA,MAAIpK,QAAQ,CAACZ,MAAb,EAAqB;AACjBgL,IAAAA,SAAS,CAAC,QAAD,CAAT,GAAsB,EAAtB;AACH,GAFD,MAGK;AACDA,IAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBpK,QAAQ,CAACpC,IAAT,GAAgB,GAAtC;AACH;;AACD,MAAIwX,SAAS,IAAIA,SAAS,CAAC/V,MAAV,GAAmB,CAApC,EAAuC;AACnC+K,IAAAA,SAAS,CAAC,WAAD,CAAT,GAAyBgL,SAAzB;AACH;;AACD,MAAIC,SAAJ,EAAe;AACXjL,IAAAA,SAAS,CAAC,WAAD,CAAT,GAAyBiL,SAAzB;AACH;;AACD,MAAIC,UAAJ,EAAgB;AACZlL,IAAAA,SAAS,CAAC,YAAD,CAAT,GAA0BkL,UAA1B;AACH;;AACD,QAAMhQ,OAAO,GAAGtF,QAAQ,CAACP,mBAAT,EAAhB;AACA,QAAMpB,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,KAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAAC+C,qBAAxB;AACA,QAAMhL,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6BmK,WAAW,CAACtC,OAAD,EAAUnS,QAAQ,CAAClC,MAAnB,CAAxC,EAAoE6E,OAApE,CAApB;AACAuH,EAAAA,WAAW,CAACE,SAAZ,GAAwBA,SAAxB;AACAF,EAAAA,WAAW,CAACQ,YAAZ,GAA2BkK,kBAAkB,CAAC5U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;;AACD,SAASqL,UAAT,CAAoBpD,OAApB,EAA6BnS,QAA7B,EAAuCwV,oBAAvC,EAA6D;AACzD,QAAMlQ,OAAO,GAAGtF,QAAQ,CAACV,aAAT,EAAhB;AACA,QAAMjB,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAP,GAAoD,YAAhE;AACA,QAAMrK,MAAM,GAAG,KAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAAC+C,qBAAxB;AACA,QAAMhL,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6B,CAACmL,CAAD,EAAIvJ,IAAJ,KAAaA,IAA1C,EAAgDvJ,OAAhD,CAApB;AACAuH,EAAAA,WAAW,CAACQ,YAAZ,GAA2BqK,kBAAkB,CAAC/U,QAAD,CAA7C;;AACA,MAAIwV,oBAAoB,KAAKzK,SAA7B,EAAwC;AACpCb,IAAAA,WAAW,CAACT,OAAZ,CAAoB,OAApB,IAAgC,WAAU+L,oBAAqB,EAA/D;AACAtL,IAAAA,WAAW,CAACM,YAAZ,GAA2B,CAAC;AAAI;AAAL,MAAe;AAAI;AAAnB,KAA3B;AACH;;AACD,SAAON,WAAP;AACH;;AACD,SAASwL,cAAT,CAAwBvD,OAAxB,EAAiCnS,QAAjC,EAA2C2R,QAA3C,EAAqD;AACjD,QAAMrM,OAAO,GAAGtF,QAAQ,CAACV,aAAT,EAAhB;AACA,QAAMjB,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,KAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAAC+C,qBAAxB;AACA,QAAMhL,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6BoK,kBAAkB,CAACvC,OAAD,EAAUR,QAAV,CAA/C,EAAoEhP,OAApE,CAApB;AACAuH,EAAAA,WAAW,CAACQ,YAAZ,GAA2BqK,kBAAkB,CAAC/U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;;AACD,SAASyL,gBAAT,CAA0BxD,OAA1B,EAAmCnS,QAAnC,EAA6CiR,QAA7C,EAAuDU,QAAvD,EAAiE;AAC7D,QAAMrM,OAAO,GAAGtF,QAAQ,CAACV,aAAT,EAAhB;AACA,QAAMjB,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,OAAf;AACA,QAAMC,IAAI,GAAG+I,gBAAgB,CAACrC,QAAD,EAAWU,QAAX,CAA7B;AACA,QAAMlI,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAAhB;AACA,QAAM9G,OAAO,GAAGwP,OAAO,CAAC+C,qBAAxB;AACA,QAAMhL,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6BgK,eAAe,CAACnC,OAAD,EAAUR,QAAV,CAA5C,EAAiEhP,OAAjE,CAApB;AACAuH,EAAAA,WAAW,CAACT,OAAZ,GAAsBA,OAAtB;AACAS,EAAAA,WAAW,CAACK,IAAZ,GAAmBA,IAAnB;AACAL,EAAAA,WAAW,CAACQ,YAAZ,GAA2BqK,kBAAkB,CAAC/U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;;AACD,SAAS0L,cAAT,CAAwBzD,OAAxB,EAAiCnS,QAAjC,EAA2C;AACvC,QAAMsF,OAAO,GAAGtF,QAAQ,CAACV,aAAT,EAAhB;AACA,QAAMjB,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,QAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAAC+C,qBAAxB;;AACA,WAAS1R,OAAT,CAAiBqS,IAAjB,EAAuBC,KAAvB,EAA8B,CAAG;;AACjC,QAAM5L,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6B9G,OAA7B,EAAsCb,OAAtC,CAApB;AACAuH,EAAAA,WAAW,CAACM,YAAZ,GAA2B,CAAC,GAAD,EAAM,GAAN,CAA3B;AACAN,EAAAA,WAAW,CAACQ,YAAZ,GAA2BqK,kBAAkB,CAAC/U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;;AACD,SAAS6L,qBAAT,CAA+B9E,QAA/B,EAAyC5F,IAAzC,EAA+C;AAC3C,SAAS4F,QAAQ,IAAIA,QAAQ,CAAC,aAAD,CAArB,IACH5F,IAAI,IAAIA,IAAI,CAACwD,IAAL,EADL,IAEJ,0BAFJ;AAGH;;AACD,SAASmH,kBAAT,CAA4BhW,QAA5B,EAAsCqL,IAAtC,EAA4C4F,QAA5C,EAAsD;AAClD,QAAMgF,aAAa,GAAG3Y,MAAM,CAAC+M,MAAP,CAAc,EAAd,EAAkB4G,QAAlB,CAAtB;AACAgF,EAAAA,aAAa,CAAC,UAAD,CAAb,GAA4BjW,QAAQ,CAACpC,IAArC;AACAqY,EAAAA,aAAa,CAAC,MAAD,CAAb,GAAwB5K,IAAI,CAACqD,IAAL,EAAxB;;AACA,MAAI,CAACuH,aAAa,CAAC,aAAD,CAAlB,EAAmC;AAC/BA,IAAAA,aAAa,CAAC,aAAD,CAAb,GAA+BF,qBAAqB,CAAC,IAAD,EAAO1K,IAAP,CAApD;AACH;;AACD,SAAO4K,aAAP;AACH;AACD;AACA;AACA;;;AACA,SAASC,eAAT,CAAyB/D,OAAzB,EAAkCnS,QAAlC,EAA4C2R,QAA5C,EAAsDtG,IAAtD,EAA4D4F,QAA5D,EAAsE;AAClE,QAAM3L,OAAO,GAAGtF,QAAQ,CAACP,mBAAT,EAAhB;AACA,QAAMgK,OAAO,GAAG;AACZ,8BAA0B;AADd,GAAhB;;AAGA,WAAS0M,WAAT,GAAuB;AACnB,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAI1U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB0U,MAAAA,GAAG,GAAGA,GAAG,GAAGrS,IAAI,CAACC,MAAL,GAAcqS,QAAd,GAAyBhW,KAAzB,CAA+B,CAA/B,CAAZ;AACH;;AACD,WAAO+V,GAAP;AACH;;AACD,QAAME,QAAQ,GAAGH,WAAW,EAA5B;AACA1M,EAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,iCAAiC6M,QAA3D;AACA,QAAMC,SAAS,GAAGP,kBAAkB,CAAChW,QAAD,EAAWqL,IAAX,EAAiB4F,QAAjB,CAApC;AACA,QAAMuF,cAAc,GAAGlD,gBAAgB,CAACiD,SAAD,EAAY5E,QAAZ,CAAvC;AACA,QAAM8E,WAAW,GAAG,OAChBH,QADgB,GAEhB,MAFgB,GAGhB,uDAHgB,GAIhBE,cAJgB,GAKhB,QALgB,GAMhBF,QANgB,GAOhB,MAPgB,GAQhB,gBARgB,GAShBC,SAAS,CAAC,aAAD,CATO,GAUhB,UAVJ;AAWA,QAAMG,YAAY,GAAG,WAAWJ,QAAX,GAAsB,IAA3C;AACA,QAAM/L,IAAI,GAAGiE,OAAO,CAACrD,OAAR,CAAgBsL,WAAhB,EAA6BpL,IAA7B,EAAmCqL,YAAnC,CAAb;;AACA,MAAInM,IAAI,KAAK,IAAb,EAAmB;AACf,UAAM/L,eAAe,EAArB;AACH;;AACD,QAAM4L,SAAS,GAAG;AAAEtL,IAAAA,IAAI,EAAEyX,SAAS,CAAC,UAAD;AAAjB,GAAlB;AACA,QAAMlY,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,MAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAACwE,kBAAxB;AACA,QAAMzM,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6BgK,eAAe,CAACnC,OAAD,EAAUR,QAAV,CAA5C,EAAiEhP,OAAjE,CAApB;AACAuH,EAAAA,WAAW,CAACE,SAAZ,GAAwBA,SAAxB;AACAF,EAAAA,WAAW,CAACT,OAAZ,GAAsBA,OAAtB;AACAS,EAAAA,WAAW,CAACK,IAAZ,GAAmBA,IAAI,CAACyF,UAAL,EAAnB;AACA9F,EAAAA,WAAW,CAACQ,YAAZ,GAA2BkK,kBAAkB,CAAC5U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM0M,qBAAN,CAA4B;AACxB7Z,EAAAA,WAAW,CAAC8Z,OAAD,EAAUlP,KAAV,EAAiBmP,SAAjB,EAA4B7F,QAA5B,EAAsC;AAC7C,SAAK4F,OAAL,GAAeA,OAAf;AACA,SAAKlP,KAAL,GAAaA,KAAb;AACA,SAAKmP,SAAL,GAAiB,CAAC,CAACA,SAAnB;AACA,SAAK7F,QAAL,GAAgBA,QAAQ,IAAI,IAA5B;AACH;;AANuB;;AAQ5B,SAAS8F,kBAAT,CAA4BxC,GAA5B,EAAiCyC,OAAjC,EAA0C;AACtC,MAAI5O,MAAM,GAAG,IAAb;;AACA,MAAI;AACAA,IAAAA,MAAM,GAAGmM,GAAG,CAAC0C,iBAAJ,CAAsB,sBAAtB,CAAT;AACH,GAFD,CAGA,OAAOlX,CAAP,EAAU;AACNqU,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACD,QAAM8C,aAAa,GAAGF,OAAO,IAAI,CAAC,QAAD,CAAjC;AACA5C,EAAAA,YAAY,CAAC,CAAC,CAAChM,MAAF,IAAY8O,aAAa,CAACxO,OAAd,CAAsBN,MAAtB,MAAkC,CAAC,CAAhD,CAAZ;AACA,SAAOA,MAAP;AACH;;AACD,SAAS+O,qBAAT,CAA+BhF,OAA/B,EAAwCnS,QAAxC,EAAkD2R,QAAlD,EAA4DtG,IAA5D,EAAkE4F,QAAlE,EAA4E;AACxE,QAAM3L,OAAO,GAAGtF,QAAQ,CAACP,mBAAT,EAAhB;AACA,QAAM2X,iBAAiB,GAAGpB,kBAAkB,CAAChW,QAAD,EAAWqL,IAAX,EAAiB4F,QAAjB,CAA5C;AACA,QAAM7G,SAAS,GAAG;AAAEtL,IAAAA,IAAI,EAAEsY,iBAAiB,CAAC,UAAD;AAAzB,GAAlB;AACA,QAAM/Y,GAAG,GAAGgH,OAAO,CAACC,OAAD,EAAU6M,OAAO,CAACvS,IAAlB,EAAwBuS,OAAO,CAACwC,SAAhC,CAAnB;AACA,QAAMrK,MAAM,GAAG,MAAf;AACA,QAAMb,OAAO,GAAG;AACZ,8BAA0B,WADd;AAEZ,6BAAyB,OAFb;AAGZ,2CAAwC,GAAE4B,IAAI,CAACqD,IAAL,EAAY,EAH1C;AAIZ,yCAAqC0I,iBAAiB,CAAC,aAAD,CAJ1C;AAKZ,oBAAgB;AALJ,GAAhB;AAOA,QAAM7M,IAAI,GAAG+I,gBAAgB,CAAC8D,iBAAD,EAAoBzF,QAApB,CAA7B;AACA,QAAMhP,OAAO,GAAGwP,OAAO,CAACwE,kBAAxB;;AACA,WAASnT,OAAT,CAAiB+Q,GAAjB,EAAsB;AAClBwC,IAAAA,kBAAkB,CAACxC,GAAD,CAAlB;AACA,QAAIlW,GAAJ;;AACA,QAAI;AACAA,MAAAA,GAAG,GAAGkW,GAAG,CAAC0C,iBAAJ,CAAsB,mBAAtB,CAAN;AACH,KAFD,CAGA,OAAOlX,CAAP,EAAU;AACNqU,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACDA,IAAAA,YAAY,CAACzP,QAAQ,CAACtG,GAAD,CAAT,CAAZ;AACA,WAAOA,GAAP;AACH;;AACD,QAAM6L,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6B9G,OAA7B,EAAsCb,OAAtC,CAApB;AACAuH,EAAAA,WAAW,CAACE,SAAZ,GAAwBA,SAAxB;AACAF,EAAAA,WAAW,CAACT,OAAZ,GAAsBA,OAAtB;AACAS,EAAAA,WAAW,CAACK,IAAZ,GAAmBA,IAAnB;AACAL,EAAAA,WAAW,CAACQ,YAAZ,GAA2BkK,kBAAkB,CAAC5U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;AACD;AACA;AACA;;;AACA,SAASmN,wBAAT,CAAkClF,OAAlC,EAA2CnS,QAA3C,EAAqD3B,GAArD,EAA0DgN,IAA1D,EAAgE;AAC5D,QAAM5B,OAAO,GAAG;AAAE,6BAAyB;AAA3B,GAAhB;;AACA,WAASjG,OAAT,CAAiB+Q,GAAjB,EAAsB;AAClB,UAAMnM,MAAM,GAAG2O,kBAAkB,CAACxC,GAAD,EAAM,CAAC,QAAD,EAAW,OAAX,CAAN,CAAjC;AACA,QAAI+C,UAAU,GAAG,IAAjB;;AACA,QAAI;AACAA,MAAAA,UAAU,GAAG/C,GAAG,CAAC0C,iBAAJ,CAAsB,6BAAtB,CAAb;AACH,KAFD,CAGA,OAAOlX,CAAP,EAAU;AACNqU,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACD,QAAI,CAACkD,UAAL,EAAiB;AACb;AACAlD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACD,UAAM1F,IAAI,GAAGsD,MAAM,CAACsF,UAAD,CAAnB;AACAlD,IAAAA,YAAY,CAAC,CAACmD,KAAK,CAAC7I,IAAD,CAAP,CAAZ;AACA,WAAO,IAAIkI,qBAAJ,CAA0BlI,IAA1B,EAAgCrD,IAAI,CAACqD,IAAL,EAAhC,EAA6CtG,MAAM,KAAK,OAAxD,CAAP;AACH;;AACD,QAAMkC,MAAM,GAAG,MAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAACwE,kBAAxB;AACA,QAAMzM,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6B9G,OAA7B,EAAsCb,OAAtC,CAApB;AACAuH,EAAAA,WAAW,CAACT,OAAZ,GAAsBA,OAAtB;AACAS,EAAAA,WAAW,CAACQ,YAAZ,GAA2BkK,kBAAkB,CAAC5U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,MAAMsN,2BAA2B,GAAG,MAAM,IAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAiCzX,QAAjC,EAA2CmS,OAA3C,EAAoD9T,GAApD,EAAyDgN,IAAzD,EAA+DqM,SAA/D,EAA0E/F,QAA1E,EAAoFvJ,MAApF,EAA4FuC,gBAA5F,EAA8G;AAC1G;AACA;AACA,QAAMgN,OAAO,GAAG,IAAIf,qBAAJ,CAA0B,CAA1B,EAA6B,CAA7B,CAAhB;;AACA,MAAIxO,MAAJ,EAAY;AACRuP,IAAAA,OAAO,CAACd,OAAR,GAAkBzO,MAAM,CAACyO,OAAzB;AACAc,IAAAA,OAAO,CAAChQ,KAAR,GAAgBS,MAAM,CAACT,KAAvB;AACH,GAHD,MAIK;AACDgQ,IAAAA,OAAO,CAACd,OAAR,GAAkB,CAAlB;AACAc,IAAAA,OAAO,CAAChQ,KAAR,GAAgB0D,IAAI,CAACqD,IAAL,EAAhB;AACH;;AACD,MAAIrD,IAAI,CAACqD,IAAL,OAAgBiJ,OAAO,CAAChQ,KAA5B,EAAmC;AAC/B,UAAMlJ,mBAAmB,EAAzB;AACH;;AACD,QAAMmZ,SAAS,GAAGD,OAAO,CAAChQ,KAAR,GAAgBgQ,OAAO,CAACd,OAA1C;AACA,MAAIgB,aAAa,GAAGD,SAApB;;AACA,MAAIF,SAAS,GAAG,CAAhB,EAAmB;AACfG,IAAAA,aAAa,GAAG9T,IAAI,CAAC+T,GAAL,CAASD,aAAT,EAAwBH,SAAxB,CAAhB;AACH;;AACD,QAAMvI,SAAS,GAAGwI,OAAO,CAACd,OAA1B;AACA,QAAMzH,OAAO,GAAGD,SAAS,GAAG0I,aAA5B;AACA,QAAME,aAAa,GAAGF,aAAa,KAAKD,SAAlB,GAA8B,kBAA9B,GAAmD,QAAzE;AACA,QAAMnO,OAAO,GAAG;AACZ,6BAAyBsO,aADb;AAEZ,4BAAyB,GAAEJ,OAAO,CAACd,OAAQ;AAF/B,GAAhB;AAIA,QAAMtM,IAAI,GAAGc,IAAI,CAAChL,KAAL,CAAW8O,SAAX,EAAsBC,OAAtB,CAAb;;AACA,MAAI7E,IAAI,KAAK,IAAb,EAAmB;AACf,UAAM/L,eAAe,EAArB;AACH;;AACD,WAASgF,OAAT,CAAiB+Q,GAAjB,EAAsBC,IAAtB,EAA4B;AACxB;AACA;AACA;AACA;AACA,UAAMwD,YAAY,GAAGjB,kBAAkB,CAACxC,GAAD,EAAM,CAAC,QAAD,EAAW,OAAX,CAAN,CAAvC;AACA,UAAM0D,UAAU,GAAGN,OAAO,CAACd,OAAR,GAAkBgB,aAArC;AACA,UAAMnJ,IAAI,GAAGrD,IAAI,CAACqD,IAAL,EAAb;AACA,QAAIuC,QAAJ;;AACA,QAAI+G,YAAY,KAAK,OAArB,EAA8B;AAC1B/G,MAAAA,QAAQ,GAAGqD,eAAe,CAACnC,OAAD,EAAUR,QAAV,CAAf,CAAmC4C,GAAnC,EAAwCC,IAAxC,CAAX;AACH,KAFD,MAGK;AACDvD,MAAAA,QAAQ,GAAG,IAAX;AACH;;AACD,WAAO,IAAI2F,qBAAJ,CAA0BqB,UAA1B,EAAsCvJ,IAAtC,EAA4CsJ,YAAY,KAAK,OAA7D,EAAsE/G,QAAtE,CAAP;AACH;;AACD,QAAM3G,MAAM,GAAG,MAAf;AACA,QAAM3H,OAAO,GAAGwP,OAAO,CAACwE,kBAAxB;AACA,QAAMzM,WAAW,GAAG,IAAIiK,WAAJ,CAAgB9V,GAAhB,EAAqBiM,MAArB,EAA6B9G,OAA7B,EAAsCb,OAAtC,CAApB;AACAuH,EAAAA,WAAW,CAACT,OAAZ,GAAsBA,OAAtB;AACAS,EAAAA,WAAW,CAACK,IAAZ,GAAmBA,IAAI,CAACyF,UAAL,EAAnB;AACA9F,EAAAA,WAAW,CAACS,gBAAZ,GAA+BA,gBAAgB,IAAI,IAAnD;AACAT,EAAAA,WAAW,CAACQ,YAAZ,GAA2BkK,kBAAkB,CAAC5U,QAAD,CAA7C;AACA,SAAOkK,WAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMgO,SAAS,GAAG;AACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,aAAa,EAAE;AAbD,CAAlB,C,CAeA;;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG;AACd;AACAC,EAAAA,OAAO,EAAE,SAFK;;AAGd;AACAC,EAAAA,MAAM,EAAE,QAJM;;AAKd;AACAC,EAAAA,OAAO,EAAE,SANK;;AAOd;AACAC,EAAAA,QAAQ,EAAE,UARI;;AASd;AACAC,EAAAA,KAAK,EAAE;AAVO,CAAlB;;AAYA,SAASC,8BAAT,CAAwCC,KAAxC,EAA+C;AAC3C,UAAQA,KAAR;AACI,SAAK;AAAU;AAAf;AACA,SAAK;AAAU;AAAf;AACA,SAAK;AAAY;AAAjB;AACI,aAAOP,SAAS,CAACC,OAAjB;;AACJ,SAAK;AAAS;AAAd;AACI,aAAOD,SAAS,CAACE,MAAjB;;AACJ,SAAK;AAAU;AAAf;AACI,aAAOF,SAAS,CAACG,OAAjB;;AACJ,SAAK;AAAW;AAAhB;AACI,aAAOH,SAAS,CAACI,QAAjB;;AACJ,SAAK;AAAQ;AAAb;AACI,aAAOJ,SAAS,CAACK,KAAjB;;AACJ;AACI;AACA,aAAOL,SAAS,CAACK,KAAjB;AAfR;AAiBH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,QAAN,CAAe;AACX7b,EAAAA,WAAW,CAAC8b,cAAD,EAAiB5W,KAAjB,EAAwB6W,QAAxB,EAAkC;AACzC,UAAMC,WAAW,GAAGxU,UAAU,CAACsU,cAAD,CAAV,IAA8B5W,KAAK,IAAI,IAAvC,IAA+C6W,QAAQ,IAAI,IAA/E;;AACA,QAAIC,WAAJ,EAAiB;AACb,WAAKC,IAAL,GAAYH,cAAZ;AACA,WAAK5W,KAAL,GAAaA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C8I,SAA1D;AACA,WAAK+N,QAAL,GAAgBA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2CA,QAA3C,GAAsD/N,SAAtE;AACH,KAJD,MAKK;AACD,YAAMkO,QAAQ,GAAGJ,cAAjB;AACA,WAAKG,IAAL,GAAYC,QAAQ,CAACD,IAArB;AACA,WAAK/W,KAAL,GAAagX,QAAQ,CAAChX,KAAtB;AACA,WAAK6W,QAAL,GAAgBG,QAAQ,CAACH,QAAzB;AACH;AACJ;;AAdU;AAiBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,KAAT,CAAezW,CAAf,EAAkB;AACd,SAAO,CAAC,GAAG0W,aAAJ,KAAsB;AACzB;AACAhX,IAAAA,OAAO,CAAC6E,OAAR,GAAkBe,IAAlB,CAAuB,MAAMtF,CAAC,CAAC,GAAG0W,aAAJ,CAA9B;AACH,GAHD;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAIC,mBAAmB,GAAG,IAA1B;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;AAChBtc,EAAAA,WAAW,GAAG;AACV,SAAKuc,KAAL,GAAa,KAAb;AACA,SAAKC,IAAL,GAAY,IAAIC,cAAJ,EAAZ;AACA,SAAKC,OAAL;AACA,SAAKC,UAAL,GAAkB3T,SAAS,CAACoC,QAA5B;AACA,SAAKwR,YAAL,GAAoB,IAAIxX,OAAJ,CAAY6E,OAAO,IAAI;AACvC,WAAKuS,IAAL,CAAUK,gBAAV,CAA2B,OAA3B,EAAoC,MAAM;AACtC,aAAKF,UAAL,GAAkB3T,SAAS,CAACyC,KAA5B;AACAxB,QAAAA,OAAO;AACV,OAHD;AAIA,WAAKuS,IAAL,CAAUK,gBAAV,CAA2B,OAA3B,EAAoC,MAAM;AACtC,aAAKF,UAAL,GAAkB3T,SAAS,CAAC8T,aAA5B;AACA7S,QAAAA,OAAO;AACV,OAHD;AAIA,WAAKuS,IAAL,CAAUK,gBAAV,CAA2B,MAA3B,EAAmC,MAAM;AACrC5S,QAAAA,OAAO;AACV,OAFD;AAGH,KAZmB,CAApB;AAaH;;AACDc,EAAAA,IAAI,CAACzJ,GAAD,EAAMiM,MAAN,EAAcC,IAAd,EAAoBd,OAApB,EAA6B;AAC7B,QAAI,KAAK6P,KAAT,EAAgB;AACZ,YAAMra,aAAa,CAAC,+BAAD,CAAnB;AACH;;AACD,SAAKqa,KAAL,GAAa,IAAb;AACA,SAAKC,IAAL,CAAUO,IAAV,CAAexP,MAAf,EAAuBjM,GAAvB,EAA4B,IAA5B;;AACA,QAAIoL,OAAO,KAAKsB,SAAhB,EAA2B;AACvB,WAAK,MAAMnF,GAAX,IAAkB6D,OAAlB,EAA2B;AACvB,YAAIA,OAAO,CAAC5D,cAAR,CAAuBD,GAAvB,CAAJ,EAAiC;AAC7B,eAAK2T,IAAL,CAAUQ,gBAAV,CAA2BnU,GAA3B,EAAgC6D,OAAO,CAAC7D,GAAD,CAAP,CAAayQ,QAAb,EAAhC;AACH;AACJ;AACJ;;AACD,QAAI9L,IAAI,KAAKQ,SAAb,EAAwB;AACpB,WAAKwO,IAAL,CAAUzR,IAAV,CAAeyC,IAAf;AACH,KAFD,MAGK;AACD,WAAKgP,IAAL,CAAUzR,IAAV;AACH;;AACD,WAAO,KAAK6R,YAAZ;AACH;;AACDzR,EAAAA,YAAY,GAAG;AACX,QAAI,CAAC,KAAKoR,KAAV,EAAiB;AACb,YAAMra,aAAa,CAAC,uCAAD,CAAnB;AACH;;AACD,WAAO,KAAKya,UAAZ;AACH;;AACDrR,EAAAA,SAAS,GAAG;AACR,QAAI,CAAC,KAAKiR,KAAV,EAAiB;AACb,YAAMra,aAAa,CAAC,oCAAD,CAAnB;AACH;;AACD,QAAI;AACA,aAAO,KAAKsa,IAAL,CAAUnR,MAAjB;AACH,KAFD,CAGA,OAAOrI,CAAP,EAAU;AACN,aAAO,CAAC,CAAR;AACH;AACJ;;AACDgJ,EAAAA,WAAW,GAAG;AACV,QAAI,CAAC,KAAKuQ,KAAV,EAAiB;AACb,YAAMra,aAAa,CAAC,sCAAD,CAAnB;AACH;;AACD,WAAO,KAAKsa,IAAL,CAAUS,QAAjB;AACH;;AACD/Q,EAAAA,YAAY,GAAG;AACX,QAAI,CAAC,KAAKqQ,KAAV,EAAiB;AACb,YAAMra,aAAa,CAAC,uCAAD,CAAnB;AACH;;AACD,WAAO,KAAKsa,IAAL,CAAUU,UAAjB;AACH;AACD;;;AACA9Q,EAAAA,KAAK,GAAG;AACJ,SAAKoQ,IAAL,CAAUpQ,KAAV;AACH;;AACD8N,EAAAA,iBAAiB,CAACiD,MAAD,EAAS;AACtB,WAAO,KAAKX,IAAL,CAAUtC,iBAAV,CAA4BiD,MAA5B,CAAP;AACH;;AACDrS,EAAAA,yBAAyB,CAACsS,QAAD,EAAW;AAChC,QAAI,KAAKZ,IAAL,CAAUa,MAAV,IAAoB,IAAxB,EAA8B;AAC1B,WAAKb,IAAL,CAAUa,MAAV,CAAiBR,gBAAjB,CAAkC,UAAlC,EAA8CO,QAA9C;AACH;AACJ;;AACDnS,EAAAA,4BAA4B,CAACmS,QAAD,EAAW;AACnC,QAAI,KAAKZ,IAAL,CAAUa,MAAV,IAAoB,IAAxB,EAA8B;AAC1B,WAAKb,IAAL,CAAUa,MAAV,CAAiBC,mBAAjB,CAAqC,UAArC,EAAiDF,QAAjD;AACH;AACJ;;AAtFe;;AAwFpB,MAAMG,iBAAN,SAAgCjB,aAAhC,CAA8C;AAC1CI,EAAAA,OAAO,GAAG;AACN,SAAKF,IAAL,CAAUgB,YAAV,GAAyB,MAAzB;AACH;;AAHyC;;AAK9C,SAASC,iBAAT,GAA6B;AACzB,SAAOpB,mBAAmB,GAAGA,mBAAmB,EAAtB,GAA2B,IAAIkB,iBAAJ,EAArD;AACH;;AACD,MAAMG,kBAAN,SAAiCpB,aAAjC,CAA+C;AAC3CI,EAAAA,OAAO,GAAG;AACN,SAAKF,IAAL,CAAUgB,YAAV,GAAyB,aAAzB;AACH;;AAH0C;;AAK/C,SAASG,kBAAT,GAA8B;AAC1B,SAAO,IAAID,kBAAJ,EAAP;AACH;;AACD,MAAME,iBAAN,SAAgCtB,aAAhC,CAA8C;AAC1CI,EAAAA,OAAO,GAAG;AACN,SAAKF,IAAL,CAAUgB,YAAV,GAAyB,MAAzB;AACH;;AAHyC;;AAK9C,SAASK,iBAAT,GAA6B;AACzB,SAAO,IAAID,iBAAJ,EAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,UAAN,CAAiB;AACb;AACJ;AACA;AACA;AACA;AACI9d,EAAAA,WAAW,CAAC+d,GAAD,EAAMzP,IAAN,EAAY4F,QAAQ,GAAG,IAAvB,EAA6B;AACpC;AACR;AACA;AACQ,SAAK8J,YAAL,GAAoB,CAApB;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAcpQ,SAAd;AACA,SAAKqQ,UAAL,GAAkBrQ,SAAlB;AACA,SAAKsQ,QAAL,GAAgBtQ,SAAhB;AACA,SAAKuQ,gBAAL,GAAwB,CAAxB;AACA,SAAKC,QAAL,GAAgBxQ,SAAhB;AACA,SAAKyQ,OAAL,GAAezQ,SAAf;AACA,SAAK0Q,IAAL,GAAYX,GAAZ;AACA,SAAKY,KAAL,GAAarQ,IAAb;AACA,SAAKwG,SAAL,GAAiBZ,QAAjB;AACA,SAAK0K,SAAL,GAAiBjK,WAAW,EAA5B;AACA,SAAKkK,UAAL,GAAkB,KAAKC,kBAAL,CAAwB,KAAKH,KAA7B,CAAlB;AACA,SAAKI,MAAL,GAAc;AAAU;AAAxB;;AACA,SAAKC,aAAL,GAAqB9Z,KAAK,IAAI;AAC1B,WAAKoZ,QAAL,GAAgBtQ,SAAhB;AACA,WAAKuQ,gBAAL,GAAwB,CAAxB;;AACA,UAAIrZ,KAAK,CAACxE,WAAN,CAAkB;AAAW;AAA7B,OAAJ,EAAkD;AAC9C,aAAKud,kBAAL,GAA0B,IAA1B;AACA,aAAKgB,oBAAL;AACH,OAHD,MAIK;AACD,aAAKb,MAAL,GAAclZ,KAAd;;AACA,aAAKga,WAAL,CAAiB;AAAQ;AAAzB;AACH;AACJ,KAXD;;AAYA,SAAKC,qBAAL,GAA6Bja,KAAK,IAAI;AAClC,WAAKoZ,QAAL,GAAgBtQ,SAAhB;;AACA,UAAI9I,KAAK,CAACxE,WAAN,CAAkB;AAAW;AAA7B,OAAJ,EAAkD;AAC9C,aAAKue,oBAAL;AACH,OAFD,MAGK;AACD,aAAKb,MAAL,GAAclZ,KAAd;;AACA,aAAKga,WAAL,CAAiB;AAAQ;AAAzB;AACH;AACJ,KATD;;AAUA,SAAKE,QAAL,GAAgB,IAAIha,OAAJ,CAAY,CAAC6E,OAAD,EAAU5E,MAAV,KAAqB;AAC7C,WAAKmZ,QAAL,GAAgBvU,OAAhB;AACA,WAAKwU,OAAL,GAAepZ,MAAf;;AACA,WAAKga,MAAL;AACH,KAJe,CAAhB,CA1CoC,CA+CpC;AACA;;AACA,SAAKD,QAAL,CAAcpU,IAAd,CAAmB,IAAnB,EAAyB,MAAM,CAAG,CAAlC;AACH;;AACDsU,EAAAA,qBAAqB,GAAG;AACpB,UAAMC,UAAU,GAAG,KAAKvB,YAAxB;AACA,WAAOrT,MAAM,IAAI,KAAK6U,eAAL,CAAqBD,UAAU,GAAG5U,MAAlC,CAAjB;AACH;;AACDmU,EAAAA,kBAAkB,CAACxQ,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACqD,IAAL,KAAc,MAAM,IAA3B;AACH;;AACD0N,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKN,MAAL,KAAgB;AAAU;AAA9B,MAA6C;AACzC;AACA;AACH;;AACD,QAAI,KAAKT,QAAL,KAAkBtQ,SAAtB,EAAiC;AAC7B;AACH;;AACD,QAAI,KAAK6Q,UAAT,EAAqB;AACjB,UAAI,KAAKR,UAAL,KAAoBrQ,SAAxB,EAAmC;AAC/B,aAAKyR,gBAAL;AACH,OAFD,MAGK;AACD,YAAI,KAAKxB,kBAAT,EAA6B;AACzB,eAAKyB,YAAL;AACH,SAFD,MAGK;AACD,cAAI,KAAKxB,oBAAT,EAA+B;AAC3B;AACA,iBAAKyB,cAAL;AACH,WAHD,MAIK;AACD,iBAAKC,eAAL;AACH;AACJ;AACJ;AACJ,KAlBD,MAmBK;AACD,WAAKC,cAAL;AACH;AACJ;;AACDC,EAAAA,aAAa,CAACna,QAAD,EAAW;AACpB;AACAP,IAAAA,OAAO,CAAC2a,GAAR,CAAY,CACR,KAAKrB,IAAL,CAAUsB,OAAV,CAAkBC,aAAlB,EADQ,EAER,KAAKvB,IAAL,CAAUsB,OAAV,CAAkBE,iBAAlB,EAFQ,CAAZ,EAGGlV,IAHH,CAGQ,CAAC,CAAC2B,SAAD,EAAYM,aAAZ,CAAD,KAAgC;AACpC,cAAQ,KAAK8R,MAAb;AACI,aAAK;AAAU;AAAf;AACIpZ,UAAAA,QAAQ,CAACgH,SAAD,EAAYM,aAAZ,CAAR;AACA;;AACJ,aAAK;AAAY;AAAjB;AACI,eAAKiS,WAAL,CAAiB;AAAW;AAA5B;;AACA;;AACJ,aAAK;AAAU;AAAf;AACI,eAAKA,WAAL,CAAiB;AAAS;AAA1B;;AACA;AATR;AAWH,KAfD;AAgBH,GAjHY,CAkHb;;;AACAO,EAAAA,gBAAgB,GAAG;AACf,SAAKK,aAAL,CAAmB,CAACnT,SAAD,EAAYM,aAAZ,KAA8B;AAC7C,YAAME,WAAW,GAAGiN,qBAAqB,CAAC,KAAKsE,IAAL,CAAUsB,OAAX,EAAoB,KAAKtB,IAAL,CAAUyB,SAA9B,EAAyC,KAAKvB,SAA9C,EAAyD,KAAKD,KAA9D,EAAqE,KAAK7J,SAA1E,CAAzC;;AACA,YAAMsL,aAAa,GAAG,KAAK1B,IAAL,CAAUsB,OAAV,CAAkBK,YAAlB,CAA+BlT,WAA/B,EAA4CsQ,iBAA5C,EAA+D9Q,SAA/D,EAA0EM,aAA1E,CAAtB;;AACA,WAAKqR,QAAL,GAAgB8B,aAAhB;AACAA,MAAAA,aAAa,CAAC9a,UAAd,GAA2B0F,IAA3B,CAAiC1J,GAAD,IAAS;AACrC,aAAKgd,QAAL,GAAgBtQ,SAAhB;AACA,aAAKqQ,UAAL,GAAkB/c,GAAlB;AACA,aAAK2c,kBAAL,GAA0B,KAA1B;AACA,aAAKgB,oBAAL;AACH,OALD,EAKG,KAAKD,aALR;AAMH,KAVD;AAWH;;AACDU,EAAAA,YAAY,GAAG;AACX;AACA,UAAMpe,GAAG,GAAG,KAAK+c,UAAjB;;AACA,SAAKyB,aAAL,CAAmB,CAACnT,SAAD,EAAYM,aAAZ,KAA8B;AAC7C,YAAME,WAAW,GAAGmN,wBAAwB,CAAC,KAAKoE,IAAL,CAAUsB,OAAX,EAAoB,KAAKtB,IAAL,CAAUyB,SAA9B,EAAyC7e,GAAzC,EAA8C,KAAKqd,KAAnD,CAA5C;;AACA,YAAM2B,aAAa,GAAG,KAAK5B,IAAL,CAAUsB,OAAV,CAAkBK,YAAlB,CAA+BlT,WAA/B,EAA4CsQ,iBAA5C,EAA+D9Q,SAA/D,EAA0EM,aAA1E,CAAtB;;AACA,WAAKqR,QAAL,GAAgBgC,aAAhB;AACAA,MAAAA,aAAa,CAAChb,UAAd,GAA2B0F,IAA3B,CAAgCK,MAAM,IAAI;AACtCA,QAAAA,MAAM,GAAGA,MAAT;AACA,aAAKiT,QAAL,GAAgBtQ,SAAhB;;AACA,aAAKwR,eAAL,CAAqBnU,MAAM,CAACyO,OAA5B;;AACA,aAAKmE,kBAAL,GAA0B,KAA1B;;AACA,YAAI5S,MAAM,CAAC0O,SAAX,EAAsB;AAClB,eAAKmE,oBAAL,GAA4B,IAA5B;AACH;;AACD,aAAKe,oBAAL;AACH,OATD,EASG,KAAKD,aATR;AAUH,KAdD;AAeH;;AACDY,EAAAA,eAAe,GAAG;AACd,UAAMjF,SAAS,GAAGF,2BAA2B,GAAG,KAAK8D,gBAArD;AACA,UAAMlT,MAAM,GAAG,IAAIwO,qBAAJ,CAA0B,KAAKmE,YAA/B,EAA6C,KAAKW,KAAL,CAAWhN,IAAX,EAA7C,CAAf,CAFc,CAGd;;AACA,UAAMrQ,GAAG,GAAG,KAAK+c,UAAjB;;AACA,SAAKyB,aAAL,CAAmB,CAACnT,SAAD,EAAYM,aAAZ,KAA8B;AAC7C,UAAIE,WAAJ;;AACA,UAAI;AACAA,QAAAA,WAAW,GAAGuN,uBAAuB,CAAC,KAAKgE,IAAL,CAAUyB,SAAX,EAAsB,KAAKzB,IAAL,CAAUsB,OAAhC,EAAyC1e,GAAzC,EAA8C,KAAKqd,KAAnD,EAA0DhE,SAA1D,EAAqE,KAAKiE,SAA1E,EAAqFvT,MAArF,EAA6F,KAAKiU,qBAAL,EAA7F,CAArC;AACH,OAFD,CAGA,OAAOtc,CAAP,EAAU;AACN,aAAKob,MAAL,GAAcpb,CAAd;;AACA,aAAKkc,WAAL,CAAiB;AAAQ;AAAzB;;AACA;AACH;;AACD,YAAMqB,aAAa,GAAG,KAAK7B,IAAL,CAAUsB,OAAV,CAAkBK,YAAlB,CAA+BlT,WAA/B,EAA4CsQ,iBAA5C,EAA+D9Q,SAA/D,EAA0EM,aAA1E,CAAtB;;AACA,WAAKqR,QAAL,GAAgBiC,aAAhB;AACAA,MAAAA,aAAa,CAACjb,UAAd,GAA2B0F,IAA3B,CAAiCwV,SAAD,IAAe;AAC3C,aAAKC,mBAAL;;AACA,aAAKnC,QAAL,GAAgBtQ,SAAhB;;AACA,aAAKwR,eAAL,CAAqBgB,SAAS,CAAC1G,OAA/B;;AACA,YAAI0G,SAAS,CAACzG,SAAd,EAAyB;AACrB,eAAKjF,SAAL,GAAiB0L,SAAS,CAACtM,QAA3B;;AACA,eAAKgL,WAAL,CAAiB;AAAU;AAA3B;AACH,SAHD,MAIK;AACD,eAAKD,oBAAL;AACH;AACJ,OAXD,EAWG,KAAKD,aAXR;AAYH,KAxBD;AAyBH;;AACDyB,EAAAA,mBAAmB,GAAG;AAClB,UAAMC,WAAW,GAAGjG,2BAA2B,GAAG,KAAK8D,gBAAvD,CADkB,CAElB;;AACA,QAAImC,WAAW,GAAG,KAAK,IAAL,GAAY,IAA9B,EAAoC;AAChC,WAAKnC,gBAAL,IAAyB,CAAzB;AACH;AACJ;;AACDoB,EAAAA,cAAc,GAAG;AACb,SAAKG,aAAL,CAAmB,CAACnT,SAAD,EAAYM,aAAZ,KAA8B;AAC7C,YAAME,WAAW,GAAG+K,aAAa,CAAC,KAAKwG,IAAL,CAAUsB,OAAX,EAAoB,KAAKtB,IAAL,CAAUyB,SAA9B,EAAyC,KAAKvB,SAA9C,CAAjC;;AACA,YAAM+B,eAAe,GAAG,KAAKjC,IAAL,CAAUsB,OAAV,CAAkBK,YAAlB,CAA+BlT,WAA/B,EAA4CsQ,iBAA5C,EAA+D9Q,SAA/D,EAA0EM,aAA1E,CAAxB;;AACA,WAAKqR,QAAL,GAAgBqC,eAAhB;AACAA,MAAAA,eAAe,CAACrb,UAAhB,GAA6B0F,IAA7B,CAAkCkJ,QAAQ,IAAI;AAC1C,aAAKoK,QAAL,GAAgBtQ,SAAhB;AACA,aAAK8G,SAAL,GAAiBZ,QAAjB;;AACA,aAAKgL,WAAL,CAAiB;AAAU;AAA3B;AACH,OAJD,EAIG,KAAKC,qBAJR;AAKH,KATD;AAUH;;AACDU,EAAAA,cAAc,GAAG;AACb,SAAKC,aAAL,CAAmB,CAACnT,SAAD,EAAYM,aAAZ,KAA8B;AAC7C,YAAME,WAAW,GAAGgM,eAAe,CAAC,KAAKuF,IAAL,CAAUsB,OAAX,EAAoB,KAAKtB,IAAL,CAAUyB,SAA9B,EAAyC,KAAKvB,SAA9C,EAAyD,KAAKD,KAA9D,EAAqE,KAAK7J,SAA1E,CAAnC;;AACA,YAAM8L,gBAAgB,GAAG,KAAKlC,IAAL,CAAUsB,OAAV,CAAkBK,YAAlB,CAA+BlT,WAA/B,EAA4CsQ,iBAA5C,EAA+D9Q,SAA/D,EAA0EM,aAA1E,CAAzB;;AACA,WAAKqR,QAAL,GAAgBsC,gBAAhB;AACAA,MAAAA,gBAAgB,CAACtb,UAAjB,GAA8B0F,IAA9B,CAAmCkJ,QAAQ,IAAI;AAC3C,aAAKoK,QAAL,GAAgBtQ,SAAhB;AACA,aAAK8G,SAAL,GAAiBZ,QAAjB;;AACA,aAAKsL,eAAL,CAAqB,KAAKb,KAAL,CAAWhN,IAAX,EAArB;;AACA,aAAKuN,WAAL,CAAiB;AAAU;AAA3B;AACH,OALD,EAKG,KAAKF,aALR;AAMH,KAVD;AAWH;;AACDQ,EAAAA,eAAe,CAACqB,WAAD,EAAc;AACzB,UAAMC,GAAG,GAAG,KAAK9C,YAAjB;AACA,SAAKA,YAAL,GAAoB6C,WAApB,CAFyB,CAGzB;AACA;AACA;;AACA,QAAI,KAAK7C,YAAL,KAAsB8C,GAA1B,EAA+B;AAC3B,WAAKC,gBAAL;AACH;AACJ;;AACD7B,EAAAA,WAAW,CAACtD,KAAD,EAAQ;AACf,QAAI,KAAKmD,MAAL,KAAgBnD,KAApB,EAA2B;AACvB;AACH;;AACD,YAAQA,KAAR;AACI,WAAK;AAAY;AAAjB;AACI;AACA;AACA;AACA,aAAKmD,MAAL,GAAcnD,KAAd;;AACA,YAAI,KAAK0C,QAAL,KAAkBtQ,SAAtB,EAAiC;AAC7B,eAAKsQ,QAAL,CAAc/Y,MAAd;AACH;;AACD;;AACJ,WAAK;AAAU;AAAf;AACI;AACA;AACA,aAAKwZ,MAAL,GAAcnD,KAAd;;AACA,YAAI,KAAK0C,QAAL,KAAkBtQ,SAAtB,EAAiC;AAC7B,eAAKsQ,QAAL,CAAc/Y,MAAd;AACH;;AACD;;AACJ,WAAK;AAAU;AAAf;AACI;AACA;AACA;AACA,cAAMyb,SAAS,GAAG,KAAKjC,MAAL,KAAgB;AAAS;AAA3C;AACA,aAAKA,MAAL,GAAcnD,KAAd;;AACA,YAAIoF,SAAJ,EAAe;AACX,eAAKD,gBAAL;;AACA,eAAK1B,MAAL;AACH;;AACD;;AACJ,WAAK;AAAS;AAAd;AACI;AACA;AACA,aAAKN,MAAL,GAAcnD,KAAd;;AACA,aAAKmF,gBAAL;;AACA;;AACJ,WAAK;AAAW;AAAhB;AACI;AACA;AACA;AACA,aAAK3C,MAAL,GAAchd,QAAQ,EAAtB;AACA,aAAK2d,MAAL,GAAcnD,KAAd;;AACA,aAAKmF,gBAAL;;AACA;;AACJ,WAAK;AAAQ;AAAb;AACI;AACA;AACA;AACA;AACA,aAAKhC,MAAL,GAAcnD,KAAd;;AACA,aAAKmF,gBAAL;;AACA;;AACJ,WAAK;AAAU;AAAf;AACI;AACA;AACA;AACA;AACA,aAAKhC,MAAL,GAAcnD,KAAd;;AACA,aAAKmF,gBAAL;;AACA;AA1DR;AA4DH;;AACD9B,EAAAA,oBAAoB,GAAG;AACnB,YAAQ,KAAKF,MAAb;AACI,WAAK;AAAU;AAAf;AACI,aAAKG,WAAL,CAAiB;AAAS;AAA1B;;AACA;;AACJ,WAAK;AAAY;AAAjB;AACI,aAAKA,WAAL,CAAiB;AAAW;AAA5B;;AACA;;AACJ,WAAK;AAAU;AAAf;AACI,aAAKG,MAAL;;AACA;AATR;AAWH;AACD;AACJ;AACA;;;AACgB,MAAR4B,QAAQ,GAAG;AACX,UAAMC,aAAa,GAAGvF,8BAA8B,CAAC,KAAKoD,MAAN,CAApD;AACA,WAAO;AACHoC,MAAAA,gBAAgB,EAAE,KAAKnD,YADpB;AAEHoD,MAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWhN,IAAX,EAFT;AAGHiK,MAAAA,KAAK,EAAEsF,aAHJ;AAIHhN,MAAAA,QAAQ,EAAE,KAAKY,SAJZ;AAKHuM,MAAAA,IAAI,EAAE,IALH;AAMHtD,MAAAA,GAAG,EAAE,KAAKW;AANP,KAAP;AAQH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4C,EAAAA,EAAE,CAACxP,IAAD,EAAOgK,cAAP,EAAuB5W,KAAvB,EAA8Bqc,SAA9B,EAAyC;AACvC,UAAMrF,QAAQ,GAAG,IAAIL,QAAJ,CAAaC,cAAc,IAAI9N,SAA/B,EAA0C9I,KAAK,IAAI8I,SAAnD,EAA8DuT,SAAS,IAAIvT,SAA3E,CAAjB;;AACA,SAAKwT,YAAL,CAAkBtF,QAAlB;;AACA,WAAO,MAAM;AACT,WAAKuF,eAAL,CAAqBvF,QAArB;AACH,KAFD;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIlR,EAAAA,IAAI,CAAC0W,WAAD,EAAcC,UAAd,EAA0B;AAC1B;AACA;AACA,WAAO,KAAKvC,QAAL,CAAcpU,IAAd,CAAmB0W,WAAnB,EAAgCC,UAAhC,CAAP;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,KAAK,CAACD,UAAD,EAAa;AACd,WAAO,KAAK3W,IAAL,CAAU,IAAV,EAAgB2W,UAAhB,CAAP;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,YAAY,CAACtF,QAAD,EAAW;AACnB,SAAKiC,UAAL,CAAgBrO,IAAhB,CAAqBoM,QAArB;;AACA,SAAK2F,eAAL,CAAqB3F,QAArB;AACH;AACD;AACJ;AACA;;;AACIuF,EAAAA,eAAe,CAACvF,QAAD,EAAW;AACtB,UAAMvX,CAAC,GAAG,KAAKwZ,UAAL,CAAgBxS,OAAhB,CAAwBuQ,QAAxB,CAAV;;AACA,QAAIvX,CAAC,KAAK,CAAC,CAAX,EAAc;AACV,WAAKwZ,UAAL,CAAgB2D,MAAhB,CAAuBnd,CAAvB,EAA0B,CAA1B;AACH;AACJ;;AACDoc,EAAAA,gBAAgB,GAAG;AACf,SAAKgB,cAAL;;AACA,UAAMC,SAAS,GAAG,KAAK7D,UAAL,CAAgB7a,KAAhB,EAAlB;;AACA0e,IAAAA,SAAS,CAAClP,OAAV,CAAkBoJ,QAAQ,IAAI;AAC1B,WAAK2F,eAAL,CAAqB3F,QAArB;AACH,KAFD;AAGH;;AACD6F,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKvD,QAAL,KAAkBxQ,SAAtB,EAAiC;AAC7B,UAAIiU,SAAS,GAAG,IAAhB;;AACA,cAAQtG,8BAA8B,CAAC,KAAKoD,MAAN,CAAtC;AACI,aAAK1D,SAAS,CAACG,OAAf;AACIW,UAAAA,KAAK,CAAC,KAAKqC,QAAL,CAAc0D,IAAd,CAAmB,IAAnB,EAAyB,KAAKjB,QAA9B,CAAD,CAAL;AACA;;AACJ,aAAK5F,SAAS,CAACI,QAAf;AACA,aAAKJ,SAAS,CAACK,KAAf;AACI,gBAAMyG,MAAM,GAAG,KAAK1D,OAApB;AACAtC,UAAAA,KAAK,CAACgG,MAAM,CAACD,IAAP,CAAY,IAAZ,EAAkB,KAAK9D,MAAvB,CAAD,CAAL;AACA;;AACJ;AACI6D,UAAAA,SAAS,GAAG,KAAZ;AACA;AAXR;;AAaA,UAAIA,SAAJ,EAAe;AACX,aAAKzD,QAAL,GAAgBxQ,SAAhB;AACA,aAAKyQ,OAAL,GAAezQ,SAAf;AACH;AACJ;AACJ;;AACD6T,EAAAA,eAAe,CAAC3F,QAAD,EAAW;AACtB,UAAMgF,aAAa,GAAGvF,8BAA8B,CAAC,KAAKoD,MAAN,CAApD;;AACA,YAAQmC,aAAR;AACI,WAAK7F,SAAS,CAACC,OAAf;AACA,WAAKD,SAAS,CAACE,MAAf;AACI,YAAIW,QAAQ,CAACD,IAAb,EAAmB;AACfE,UAAAA,KAAK,CAACD,QAAQ,CAACD,IAAT,CAAciG,IAAd,CAAmBhG,QAAnB,EAA6B,KAAK+E,QAAlC,CAAD,CAAL;AACH;;AACD;;AACJ,WAAK5F,SAAS,CAACG,OAAf;AACI,YAAIU,QAAQ,CAACH,QAAb,EAAuB;AACnBI,UAAAA,KAAK,CAACD,QAAQ,CAACH,QAAT,CAAkBmG,IAAlB,CAAuBhG,QAAvB,CAAD,CAAL;AACH;;AACD;;AACJ,WAAKb,SAAS,CAACI,QAAf;AACA,WAAKJ,SAAS,CAACK,KAAf;AACI,YAAIQ,QAAQ,CAAChX,KAAb,EAAoB;AAChBiX,UAAAA,KAAK,CAACD,QAAQ,CAAChX,KAAT,CAAegd,IAAf,CAAoBhG,QAApB,EAA8B,KAAKkC,MAAnC,CAAD,CAAL;AACH;;AACD;;AACJ;AACI;AACA,YAAIlC,QAAQ,CAAChX,KAAb,EAAoB;AAChBiX,UAAAA,KAAK,CAACD,QAAQ,CAAChX,KAAT,CAAegd,IAAf,CAAoBhG,QAApB,EAA8B,KAAKkC,MAAnC,CAAD,CAAL;AACH;;AAtBT;AAwBH;AACD;AACJ;AACA;AACA;;;AACIgE,EAAAA,MAAM,GAAG;AACL,UAAMrS,KAAK,GAAG,KAAKgP,MAAL,KAAgB;AAAS;AAAzB,OACV,KAAKA,MAAL,KAAgB;AAAU;AAD9B;;AAEA,QAAIhP,KAAJ,EAAW;AACP,WAAKmP,WAAL,CAAiB;AAAU;AAA3B;AACH;;AACD,WAAOnP,KAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIsS,EAAAA,KAAK,GAAG;AACJ,UAAMtS,KAAK,GAAG,KAAKgP,MAAL,KAAgB;AAAU;AAAxC;;AACA,QAAIhP,KAAJ,EAAW;AACP,WAAKmP,WAAL,CAAiB;AAAU;AAA3B;AACH;;AACD,WAAOnP,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIxK,EAAAA,MAAM,GAAG;AACL,UAAMwK,KAAK,GAAG,KAAKgP,MAAL,KAAgB;AAAU;AAA1B,OACV,KAAKA,MAAL,KAAgB;AAAU;AAD9B;;AAEA,QAAIhP,KAAJ,EAAW;AACP,WAAKmP,WAAL,CAAiB;AAAY;AAA7B;AACH;;AACD,WAAOnP,KAAP;AACH;;AA5cY;AA+cjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMuS,SAAN,CAAgB;AACZtiB,EAAAA,WAAW,CAACuiB,QAAD,EAAWtf,QAAX,EAAqB;AAC5B,SAAKsf,QAAL,GAAgBA,QAAhB;;AACA,QAAItf,QAAQ,YAAYd,QAAxB,EAAkC;AAC9B,WAAKge,SAAL,GAAiBld,QAAjB;AACH,KAFD,MAGK;AACD,WAAKkd,SAAL,GAAiBhe,QAAQ,CAACY,WAAT,CAAqBE,QAArB,EAA+Bsf,QAAQ,CAAC1f,IAAxC,CAAjB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIyW,EAAAA,QAAQ,GAAG;AACP,WAAO,UAAU,KAAK6G,SAAL,CAAepf,MAAzB,GAAkC,GAAlC,GAAwC,KAAKof,SAAL,CAAetf,IAA9D;AACH;;AACD2hB,EAAAA,OAAO,CAACpN,OAAD,EAAUnS,QAAV,EAAoB;AACvB,WAAO,IAAIqf,SAAJ,CAAclN,OAAd,EAAuBnS,QAAvB,CAAP;AACH;AACD;AACJ;AACA;;;AACY,MAAJwf,IAAI,GAAG;AACP,UAAMxf,QAAQ,GAAG,IAAId,QAAJ,CAAa,KAAKge,SAAL,CAAepf,MAA5B,EAAoC,EAApC,CAAjB;AACA,WAAO,KAAKyhB,OAAL,CAAa,KAAKD,QAAlB,EAA4Btf,QAA5B,CAAP;AACH;AACD;AACJ;AACA;;;AACc,MAANlC,MAAM,GAAG;AACT,WAAO,KAAKof,SAAL,CAAepf,MAAtB;AACH;AACD;AACJ;AACA;;;AACgB,MAAR2T,QAAQ,GAAG;AACX,WAAO,KAAKyL,SAAL,CAAetf,IAAtB;AACH;AACD;AACJ;AACA;AACA;;;AACY,MAAJkB,IAAI,GAAG;AACP,WAAOiS,aAAa,CAAC,KAAKmM,SAAL,CAAetf,IAAhB,CAApB;AACH;AACD;AACJ;AACA;;;AACe,MAAPmf,OAAO,GAAG;AACV,WAAO,KAAKuC,QAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACc,MAANjP,MAAM,GAAG;AACT,UAAME,OAAO,GAAGF,MAAM,CAAC,KAAK6M,SAAL,CAAetf,IAAhB,CAAtB;;AACA,QAAI2S,OAAO,KAAK,IAAhB,EAAsB;AAClB,aAAO,IAAP;AACH;;AACD,UAAMvQ,QAAQ,GAAG,IAAId,QAAJ,CAAa,KAAKge,SAAL,CAAepf,MAA5B,EAAoCyS,OAApC,CAAjB;AACA,WAAO,IAAI8O,SAAJ,CAAc,KAAKC,QAAnB,EAA6Btf,QAA7B,CAAP;AACH;AACD;AACJ;AACA;;;AACIyf,EAAAA,YAAY,CAAC3gB,IAAD,EAAO;AACf,QAAI,KAAKoe,SAAL,CAAetf,IAAf,KAAwB,EAA5B,EAAgC;AAC5B,YAAMiB,oBAAoB,CAACC,IAAD,CAA1B;AACH;AACJ;;AAxEW;AA0EhB;AACA;AACA;AACA;;;AACA,SAAS4gB,gBAAT,CAA0B5E,GAA1B,EAA+BtF,oBAA/B,EAAqD;AACjDsF,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,UAAjB;;AACA,QAAMvV,WAAW,GAAGqL,UAAU,CAACuF,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,EAA6B1H,oBAA7B,CAA9B;AACA,SAAOsF,GAAG,CAACiC,OAAJ,CACF4C,qBADE,CACoBzV,WADpB,EACiCwQ,kBADjC,EAEF3S,IAFE,CAEG0F,KAAK,IAAI+H,oBAAoB,KAAKzK,SAAzB,GACb;AACE0C,EAAAA,KAAK,CAACpN,KAAN,CAAY,CAAZ,EAAemV,oBAAf,CAFW,GAGb/H,KALC,CAAP;AAMH;AACD;AACA;AACA;AACA;;;AACA,SAASmS,eAAT,CAAyB9E,GAAzB,EAA8BtF,oBAA9B,EAAoD;AAChDsF,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,SAAjB;;AACA,QAAMvV,WAAW,GAAGqL,UAAU,CAACuF,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,EAA6B1H,oBAA7B,CAA9B;AACA,SAAOsF,GAAG,CAACiC,OAAJ,CACF4C,qBADE,CACoBzV,WADpB,EACiC0Q,iBADjC,EAEF7S,IAFE,CAEGsD,IAAI,IAAImK,oBAAoB,KAAKzK,SAAzB,GACZ;AACEM,EAAAA,IAAI,CAAChL,KAAL,CAAW,CAAX,EAAcmV,oBAAd,CAFU,GAGZnK,IALC,CAAP;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwU,aAAT,CAAuB/E,GAAvB,EAA4B5O,IAA5B,EAAkC+E,QAAlC,EAA4C;AACxC6J,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,aAAjB;;AACA,QAAMvV,WAAW,GAAGgM,eAAe,CAAC4E,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,EAA6BxL,WAAW,EAAxC,EAA4C,IAAIlD,OAAJ,CAAYtC,IAAZ,EAAkB,IAAlB,CAA5C,EAAqE+E,QAArE,CAAnC;AACA,SAAO6J,GAAG,CAACiC,OAAJ,CACF4C,qBADE,CACoBzV,WADpB,EACiCsQ,iBADjC,EAEFzS,IAFE,CAEG+X,aAAa,IAAI;AACvB,WAAO;AACH7O,MAAAA,QAAQ,EAAE6O,aADP;AAEHhF,MAAAA;AAFG,KAAP;AAIH,GAPM,CAAP;AAQH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiF,sBAAT,CAAgCjF,GAAhC,EAAqC5O,IAArC,EAA2C+E,QAA3C,EAAqD;AACjD6J,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,sBAAjB;;AACA,SAAO,IAAI5E,UAAJ,CAAeC,GAAf,EAAoB,IAAItM,OAAJ,CAAYtC,IAAZ,CAApB,EAAuC+E,QAAvC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+O,cAAT,CAAwBlF,GAAxB,EAA6B1V,KAA7B,EAAoCpG,MAAM,GAAG4M,YAAY,CAACC,GAA1D,EAA+DoF,QAA/D,EAAyE;AACrE6J,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,cAAjB;;AACA,QAAMvT,IAAI,GAAGE,cAAc,CAACpN,MAAD,EAASoG,KAAT,CAA3B;AACA,QAAM6Q,aAAa,GAAG3Y,MAAM,CAAC+M,MAAP,CAAc,EAAd,EAAkB4G,QAAlB,CAAtB;;AACA,MAAIgF,aAAa,CAAC,aAAD,CAAb,IAAgC,IAAhC,IAAwC/J,IAAI,CAACC,WAAL,IAAoB,IAAhE,EAAsE;AAClE8J,IAAAA,aAAa,CAAC,aAAD,CAAb,GAA+B/J,IAAI,CAACC,WAApC;AACH;;AACD,SAAO0T,aAAa,CAAC/E,GAAD,EAAM5O,IAAI,CAACA,IAAX,EAAiB+J,aAAjB,CAApB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgK,SAAT,CAAmBnF,GAAnB,EAAwB;AACpB,QAAMoF,WAAW,GAAG;AAChBtM,IAAAA,QAAQ,EAAE,EADM;AAEhBC,IAAAA,KAAK,EAAE;AAFS,GAApB;AAIA,SAAOsM,aAAa,CAACrF,GAAD,EAAMoF,WAAN,CAAb,CAAgCnY,IAAhC,CAAqC,MAAMmY,WAA3C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;SACeC,a;;;AAYf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCAjCA,WAA6BrF,GAA7B,EAAkCoF,WAAlC,EAA+C7K,SAA/C,EAA0D;AACtD,UAAM+K,GAAG,GAAG;AACR;AACA/K,MAAAA;AAFQ,KAAZ;AAIA,UAAMgL,QAAQ,SAASC,MAAM,CAACxF,GAAD,EAAMsF,GAAN,CAA7B;AACAF,IAAAA,WAAW,CAACtM,QAAZ,CAAqB/G,IAArB,CAA0B,GAAGwT,QAAQ,CAACzM,QAAtC;AACAsM,IAAAA,WAAW,CAACrM,KAAZ,CAAkBhH,IAAlB,CAAuB,GAAGwT,QAAQ,CAACxM,KAAnC;;AACA,QAAIwM,QAAQ,CAACvM,aAAT,IAA0B,IAA9B,EAAoC;AAChC,YAAMqM,aAAa,CAACrF,GAAD,EAAMoF,WAAN,EAAmBG,QAAQ,CAACvM,aAA5B,CAAnB;AACH;AACJ,G;;;;AAuBD,SAASwM,MAAT,CAAgBxF,GAAhB,EAAqByF,OAArB,EAA8B;AAC1B,MAAIA,OAAO,IAAI,IAAf,EAAqB;AACjB,QAAI,OAAOA,OAAO,CAACjL,UAAf,KAA8B,QAAlC,EAA4C;AACxCtQ,MAAAA,cAAc,CAAC,oBAAD;AACd;AAAgB,OADF;AAEd;AAAgB,UAFF,EAEQub,OAAO,CAACjL,UAFhB,CAAd;AAGH;AACJ;;AACD,QAAMkL,EAAE,GAAGD,OAAO,IAAI,EAAtB;AACA,QAAMrW,WAAW,GAAGiL,MAAM,CAAC2F,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB;AAC1B;AAAgB,KADU,EACLsD,EAAE,CAACnL,SADE,EACSmL,EAAE,CAAClL,UADZ,CAA1B;AAEA,SAAOwF,GAAG,CAACiC,OAAJ,CAAY4C,qBAAZ,CAAkCzV,WAAlC,EAA+CsQ,iBAA/C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiG,aAAT,CAAuB3F,GAAvB,EAA4B;AACxBA,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,aAAjB;;AACA,QAAMvV,WAAW,GAAG+K,aAAa,CAAC6F,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,EAA6BxL,WAAW,EAAxC,CAAjC;AACA,SAAOoJ,GAAG,CAACiC,OAAJ,CAAY4C,qBAAZ,CAAkCzV,WAAlC,EAA+CsQ,iBAA/C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkG,gBAAT,CAA0B5F,GAA1B,EAA+B7J,QAA/B,EAAyC;AACrC6J,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,gBAAjB;;AACA,QAAMvV,WAAW,GAAGyL,gBAAgB,CAACmF,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,EAA6BjM,QAA7B,EAAuCS,WAAW,EAAlD,CAApC;AACA,SAAOoJ,GAAG,CAACiC,OAAJ,CAAY4C,qBAAZ,CAAkCzV,WAAlC,EAA+CsQ,iBAA/C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmG,gBAAT,CAA0B7F,GAA1B,EAA+B;AAC3BA,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,gBAAjB;;AACA,QAAMvV,WAAW,GAAGwL,cAAc,CAACoF,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,EAA6BxL,WAAW,EAAxC,CAAlC;AACA,SAAOoJ,GAAG,CAACiC,OAAJ,CACF4C,qBADE,CACoBzV,WADpB,EACiCsQ,iBADjC,EAEFzS,IAFE,CAEG1J,GAAG,IAAI;AACb,QAAIA,GAAG,KAAK,IAAZ,EAAkB;AACd,YAAMK,aAAa,EAAnB;AACH;;AACD,WAAOL,GAAP;AACH,GAPM,CAAP;AAQH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuiB,cAAT,CAAwB9F,GAAxB,EAA6B;AACzBA,EAAAA,GAAG,CAAC2E,YAAJ,CAAiB,cAAjB;;AACA,QAAMvV,WAAW,GAAG0L,cAAc,CAACkF,GAAG,CAACiC,OAAL,EAAcjC,GAAG,CAACoC,SAAlB,CAAlC;AACA,SAAOpC,GAAG,CAACiC,OAAJ,CAAY4C,qBAAZ,CAAkCzV,WAAlC,EAA+CsQ,iBAA/C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqG,WAAT,CAAqB/F,GAArB,EAA0BrK,SAA1B,EAAqC;AACjC,QAAMF,OAAO,GAAGC,KAAK,CAACsK,GAAG,CAACoC,SAAJ,CAActf,IAAf,EAAqB6S,SAArB,CAArB;AACA,QAAMzQ,QAAQ,GAAG,IAAId,QAAJ,CAAa4b,GAAG,CAACoC,SAAJ,CAAcpf,MAA3B,EAAmCyS,OAAnC,CAAjB;AACA,SAAO,IAAI8O,SAAJ,CAAcvE,GAAG,CAACiC,OAAlB,EAA2B/c,QAA3B,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8gB,KAAT,CAAeljB,IAAf,EAAqB;AACjB,SAAO,kBAAkBmjB,IAAlB,CAAuBnjB,IAAvB,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAASojB,UAAT,CAAoB7O,OAApB,EAA6B9T,GAA7B,EAAkC;AAC9B,SAAO,IAAIghB,SAAJ,CAAclN,OAAd,EAAuB9T,GAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS4iB,WAAT,CAAqBnG,GAArB,EAA0Bld,IAA1B,EAAgC;AAC5B,MAAIkd,GAAG,YAAYoG,mBAAnB,EAAwC;AACpC,UAAM/O,OAAO,GAAG2I,GAAhB;;AACA,QAAI3I,OAAO,CAACgP,OAAR,IAAmB,IAAvB,EAA6B;AACzB,YAAM5iB,eAAe,EAArB;AACH;;AACD,UAAMyV,SAAS,GAAG,IAAIqL,SAAJ,CAAclN,OAAd,EAAuBA,OAAO,CAACgP,OAA/B,CAAlB;;AACA,QAAIvjB,IAAI,IAAI,IAAZ,EAAkB;AACd,aAAOqjB,WAAW,CAACjN,SAAD,EAAYpW,IAAZ,CAAlB;AACH,KAFD,MAGK;AACD,aAAOoW,SAAP;AACH;AACJ,GAZD,MAaK;AACD;AACA,QAAIpW,IAAI,KAAKmN,SAAb,EAAwB;AACpB,aAAO8V,WAAW,CAAC/F,GAAD,EAAMld,IAAN,CAAlB;AACH,KAFD,MAGK;AACD,aAAOkd,GAAP;AACH;AACJ;AACJ;;AACD,SAASsG,KAAT,CAAeC,YAAf,EAA6BC,SAA7B,EAAwC;AACpC,MAAIA,SAAS,IAAIR,KAAK,CAACQ,SAAD,CAAtB,EAAmC;AAC/B,QAAID,YAAY,YAAYH,mBAA5B,EAAiD;AAC7C,aAAOF,UAAU,CAACK,YAAD,EAAeC,SAAf,CAAjB;AACH,KAFD,MAGK;AACD,YAAM3iB,eAAe,CAAC,0EAAD,CAArB;AACH;AACJ,GAPD,MAQK;AACD,WAAOsiB,WAAW,CAACI,YAAD,EAAeC,SAAf,CAAlB;AACH;AACJ;;AACD,SAASC,aAAT,CAAuB3hB,IAAvB,EAA6B4hB,MAA7B,EAAqC;AACjC,QAAM7hB,YAAY,GAAG6hB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC7kB,yBAAD,CAA3E;;AACA,MAAIgD,YAAY,IAAI,IAApB,EAA0B;AACtB,WAAO,IAAP;AACH;;AACD,SAAOT,QAAQ,CAACQ,kBAAT,CAA4BC,YAA5B,EAA0CC,IAA1C,CAAP;AACH;;AACD,SAAS6hB,wBAAT,CAAkC1E,OAAlC,EAA2Cnd,IAA3C,EAAiD8hB,IAAjD,EAAuDnB,OAAO,GAAG,EAAjE,EAAqE;AACjExD,EAAAA,OAAO,CAACnd,IAAR,GAAgB,GAAEA,IAAK,IAAG8hB,IAAK,EAA/B;AACA3E,EAAAA,OAAO,CAACpI,SAAR,GAAoB,MAApB;AACA,QAAM;AAAEgN,IAAAA;AAAF,MAAoBpB,OAA1B;;AACA,MAAIoB,aAAJ,EAAmB;AACf5E,IAAAA,OAAO,CAAC6E,kBAAR,GACI,OAAOD,aAAP,KAAyB,QAAzB,GACMA,aADN,GAEMplB,mBAAmB,CAAColB,aAAD,EAAgB5E,OAAO,CAAC8E,GAAR,CAAYtB,OAAZ,CAAoBuB,SAApC,CAH7B;AAIH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMZ,mBAAN,CAA0B;AACtBnkB,EAAAA,WAAW;AACX;AACJ;AACA;AACI8kB,EAAAA,GAJW,EAINE,aAJM;AAKX;AACJ;AACA;AACIC,EAAAA,iBARW;AASX;AACJ;AACA;AACIC,EAAAA,IAZW,EAYLC,gBAZK,EAYa;AACpB,SAAKL,GAAL,GAAWA,GAAX;AACA,SAAKE,aAAL,GAAqBA,aAArB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKf,OAAL,GAAe,IAAf;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKgB,KAAL,GAAazlB,YAAb;AACA,SAAKiY,SAAL,GAAiB,OAAjB;AACA,SAAKyN,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,sBAAL,GAA8B1lB,gCAA9B;AACA,SAAK2lB,mBAAL,GAA2B1lB,6BAA3B;AACA,SAAK2lB,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;;AACA,QAAIR,IAAI,IAAI,IAAZ,EAAkB;AACd,WAAKd,OAAL,GAAejiB,QAAQ,CAACQ,kBAAT,CAA4BuiB,IAA5B,EAAkC,KAAKE,KAAvC,CAAf;AACH,KAFD,MAGK;AACD,WAAKhB,OAAL,GAAeI,aAAa,CAAC,KAAKY,KAAN,EAAa,KAAKN,GAAL,CAAStB,OAAtB,CAA5B;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACY,MAAJ3gB,IAAI,GAAG;AACP,WAAO,KAAKuiB,KAAZ;AACH;;AACO,MAAJviB,IAAI,CAACA,IAAD,EAAO;AACX,SAAKuiB,KAAL,GAAaviB,IAAb;;AACA,QAAI,KAAKqiB,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKd,OAAL,GAAejiB,QAAQ,CAACQ,kBAAT,CAA4B,KAAKuiB,IAAjC,EAAuCriB,IAAvC,CAAf;AACH,KAFD,MAGK;AACD,WAAKuhB,OAAL,GAAeI,aAAa,CAAC3hB,IAAD,EAAO,KAAKiiB,GAAL,CAAStB,OAAhB,CAA5B;AACH;AACJ;AACD;AACJ;AACA;;;AAC0B,MAAlB5J,kBAAkB,GAAG;AACrB,WAAO,KAAK4L,mBAAZ;AACH;;AACqB,MAAlB5L,kBAAkB,CAAC+L,IAAD,EAAO;AACzB1d,IAAAA,cAAc,CAAC,MAAD;AACd;AAAe,KADD;AAEd;AAAgBgN,IAAAA,MAAM,CAAC2Q,iBAFT,EAE4BD,IAF5B,CAAd;AAGA,SAAKH,mBAAL,GAA2BG,IAA3B;AACH;AACD;AACJ;AACA;AACA;;;AAC6B,MAArBxN,qBAAqB,GAAG;AACxB,WAAO,KAAKoN,sBAAZ;AACH;;AACwB,MAArBpN,qBAAqB,CAACwN,IAAD,EAAO;AAC5B1d,IAAAA,cAAc,CAAC,MAAD;AACd;AAAe,KADD;AAEd;AAAgBgN,IAAAA,MAAM,CAAC2Q,iBAFT,EAE4BD,IAF5B,CAAd;AAGA,SAAKJ,sBAAL,GAA8BI,IAA9B;AACH;;AACK1F,EAAAA,aAAa,GAAG;AAAA;;AAAA;AAClB,UAAI,KAAI,CAAC4E,kBAAT,EAA6B;AACzB,eAAO,KAAI,CAACA,kBAAZ;AACH;;AACD,YAAMgB,IAAI,GAAG,KAAI,CAACb,aAAL,CAAmBc,YAAnB,CAAgC;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAhC,CAAb;;AACA,UAAIF,IAAJ,EAAU;AACN,cAAMG,SAAS,SAASH,IAAI,CAACI,QAAL,EAAxB;;AACA,YAAID,SAAS,KAAK,IAAlB,EAAwB;AACpB,iBAAOA,SAAS,CAACE,WAAjB;AACH;AACJ;;AACD,aAAO,IAAP;AAXkB;AAYrB;;AACKhG,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,YAAMiG,QAAQ,GAAG,MAAI,CAAClB,iBAAL,CAAuBa,YAAvB,CAAoC;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAApC,CAAjB;;AACA,UAAII,QAAJ,EAAc;AACV,cAAMpa,MAAM,SAASoa,QAAQ,CAACF,QAAT,EAArB,CADU,CAEV;AACA;AACA;AACA;;AACA,eAAOla,MAAM,CAACoK,KAAd;AACH;;AACD,aAAO,IAAP;AAVsB;AAWzB;AACD;AACJ;AACA;;;AACIiQ,EAAAA,OAAO,GAAG;AACN,QAAI,CAAC,KAAKd,QAAV,EAAoB;AAChB,WAAKA,QAAL,GAAgB,IAAhB;;AACA,WAAKG,SAAL,CAAe3S,OAAf,CAAuBuT,OAAO,IAAIA,OAAO,CAAC9gB,MAAR,EAAlC;;AACA,WAAKkgB,SAAL,CAAea,KAAf;AACH;;AACD,WAAOlhB,OAAO,CAAC6E,OAAR,EAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIqL,EAAAA,qBAAqB,CAAClS,GAAD,EAAM;AACvB,WAAO,IAAIkf,SAAJ,CAAc,IAAd,EAAoBlf,GAApB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIid,EAAAA,YAAY,CAAClT,WAAD,EAAcC,cAAd,EAA8BT,SAA9B,EAAyCM,aAAzC,EAAwD;AAChE,QAAI,CAAC,KAAKqY,QAAV,EAAoB;AAChB,YAAMe,OAAO,GAAGnZ,WAAW,CAACC,WAAD,EAAc,KAAKkY,MAAnB,EAA2B1Y,SAA3B,EAAsCM,aAAtC,EAAqDG,cAArD,EAAqE,KAAK+X,gBAA1E,CAA3B;;AACA,WAAKM,SAAL,CAAec,GAAf,CAAmBF,OAAnB,EAFgB,CAGhB;;;AACAA,MAAAA,OAAO,CAAC/gB,UAAR,GAAqB0F,IAArB,CAA0B,MAAM,KAAKya,SAAL,CAAee,MAAf,CAAsBH,OAAtB,CAAhC,EAAgE,MAAM,KAAKZ,SAAL,CAAee,MAAf,CAAsBH,OAAtB,CAAtE;AACA,aAAOA,OAAP;AACH,KAND,MAOK;AACD,aAAO,IAAIphB,WAAJ,CAAgBpD,UAAU,EAA1B,CAAP;AACH;AACJ;;AACK+gB,EAAAA,qBAAqB,CAACzV,WAAD,EAAcC,cAAd,EAA8B;AAAA;;AAAA;AACrD,YAAM,CAACT,SAAD,EAAYM,aAAZ,UAAmC7H,OAAO,CAAC2a,GAAR,CAAY,CACjD,MAAI,CAACE,aAAL,EADiD,EAEjD,MAAI,CAACC,iBAAL,EAFiD,CAAZ,CAAzC;AAIA,aAAO,MAAI,CAACG,YAAL,CAAkBlT,WAAlB,EAA+BC,cAA/B,EAA+CT,SAA/C,EAA0DM,aAA1D,EAAyE3H,UAAzE,EAAP;AALqD;AAMxD;;AAjJqB;;AAoJ1B,MAAMvD,IAAI,GAAG,mBAAb;AACA,MAAM8B,OAAO,GAAG,OAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,MAAM4iB,YAAY,GAAG,SAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkB3I,GAAlB,EAAuBtF,oBAAvB,EAA6C;AACzCsF,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAO4E,gBAAgB,CAAC5E,GAAD,EAAMtF,oBAAN,CAAvB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkO,WAAT,CAAqB5I,GAArB,EAA0B5O,IAA1B,EAAgC+E,QAAhC,EAA0C;AACtC6J,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAO+E,aAAa,CAAC/E,GAAD,EAAM5O,IAAN,EAAY+E,QAAZ,CAApB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0S,YAAT,CAAsB7I,GAAtB,EAA2B1V,KAA3B,EAAkCpG,MAAlC,EAA0CiS,QAA1C,EAAoD;AAChD6J,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAOkF,cAAc,CAAClF,GAAD,EAAM1V,KAAN,EAAapG,MAAb,EAAqBiS,QAArB,CAArB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2S,oBAAT,CAA8B9I,GAA9B,EAAmC5O,IAAnC,EAAyC+E,QAAzC,EAAmD;AAC/C6J,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAOiF,sBAAsB,CAACjF,GAAD,EAAM5O,IAAN,EAAY+E,QAAZ,CAA7B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4S,WAAT,CAAqB/I,GAArB,EAA0B;AACtBA,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAO2F,aAAa,CAAC3F,GAAD,CAApB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgJ,cAAT,CAAwBhJ,GAAxB,EAA6B7J,QAA7B,EAAuC;AACnC6J,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAO4F,gBAAgB,CAAC5F,GAAD,EAAM7J,QAAN,CAAvB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8S,IAAT,CAAcjJ,GAAd,EAAmByF,OAAnB,EAA4B;AACxBzF,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAOwF,MAAM,CAACxF,GAAD,EAAMyF,OAAN,CAAb;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,OAAT,CAAiBlJ,GAAjB,EAAsB;AAClBA,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAAOmF,SAAS,CAACnF,GAAD,CAAhB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmJ,cAAT,CAAwBnJ,GAAxB,EAA6B;AACzBA,EAAAA,GAAG,GAAGte,kBAAkB,CAACse,GAAD,CAAxB;AACA,SAA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","sourcesContent":["import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n/**\n * Domain name for firebase storage.\n */\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\n * The key in Firebase config json for the storage bucket.\n */\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nclass StorageError extends FirebaseError {\n    /**\n     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n     *  added to the end of the message.\n     * @param message  - Error message.\n     */\n    constructor(code, message) {\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n        /**\n         * Stores custom error data unque to StorageError.\n         */\n        this.customData = { serverResponse: null };\n        this._baseMessage = this.message;\n        // Without this, `instanceof StorageError`, in tests for example,\n        // returns false.\n        Object.setPrototypeOf(this, StorageError.prototype);\n    }\n    /**\n     * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n     */\n    _codeEquals(code) {\n        return prependCode(code) === this.code;\n    }\n    /**\n     * Optional response message that was added by the server.\n     */\n    get serverResponse() {\n        return this.customData.serverResponse;\n    }\n    set serverResponse(serverResponse) {\n        this.customData.serverResponse = serverResponse;\n        if (this.customData.serverResponse) {\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n        }\n        else {\n            this.message = this._baseMessage;\n        }\n    }\n}\nfunction prependCode(code) {\n    return 'storage/' + code;\n}\nfunction unknown() {\n    const message = 'An unknown error occurred, please check the error payload for ' +\n        'server response.';\n    return new StorageError(\"unknown\" /* UNKNOWN */, message);\n}\nfunction objectNotFound(path) {\n    return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n    return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" +\n        bucket +\n        \"' exceeded, please view quota on \" +\n        'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\n        'Authentication and try again.';\n    return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\n}\nfunction unauthorizedApp() {\n    return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n    return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n    return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n    return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n    return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n    return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n    return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +\n        \"found. Did you set the '\" +\n        CONFIG_STORAGE_BUCKET_KEY +\n        \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n    return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n    return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n    return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\n}\n/**\n * @internal\n */\nfunction invalidArgument(message) {\n    return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\n}\nfunction appDeleted() {\n    return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\n}\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nfunction invalidRootOperation(name) {\n    return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" +\n        name +\n        \"' cannot be performed on a root reference, create a non-root \" +\n        \"reference using child, such as .child('file.png').\");\n}\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nfunction invalidFormat(format, message) {\n    return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\n * @param message - A message describing the internal error.\n */\nfunction internalError(message) {\n    throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nclass Location {\n    constructor(bucket, path) {\n        this.bucket = bucket;\n        this.path_ = path;\n    }\n    get path() {\n        return this.path_;\n    }\n    get isRoot() {\n        return this.path.length === 0;\n    }\n    fullServerUrl() {\n        const encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    }\n    bucketOnlyServerUrl() {\n        const encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o';\n    }\n    static makeFromBucketSpec(bucketString, host) {\n        let bucketLocation;\n        try {\n            bucketLocation = Location.makeFromUrl(bucketString, host);\n        }\n        catch (e) {\n            // Not valid URL, use as-is. This lets you put bare bucket names in\n            // config.\n            return new Location(bucketString, '');\n        }\n        if (bucketLocation.path === '') {\n            return bucketLocation;\n        }\n        else {\n            throw invalidDefaultBucket(bucketString);\n        }\n    }\n    static makeFromUrl(url, host) {\n        let location = null;\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n        function gsModify(loc) {\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\n                loc.path_ = loc.path_.slice(0, -1);\n            }\n        }\n        const gsPath = '(/(.*))?$';\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n        const gsIndices = { bucket: 1, path: 3 };\n        function httpModify(loc) {\n            loc.path_ = decodeURIComponent(loc.path);\n        }\n        const version = 'v[A-Za-z0-9_]+';\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\n        const cloudStorageHost = host === DEFAULT_HOST\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n            : host;\n        const cloudStoragePath = '([^?#]*)';\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n        const cloudStorageIndices = { bucket: 1, path: 2 };\n        const groups = [\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n            {\n                regex: firebaseStorageRegExp,\n                indices: firebaseStorageIndices,\n                postModify: httpModify\n            },\n            {\n                regex: cloudStorageRegExp,\n                indices: cloudStorageIndices,\n                postModify: httpModify\n            }\n        ];\n        for (let i = 0; i < groups.length; i++) {\n            const group = groups[i];\n            const captures = group.regex.exec(url);\n            if (captures) {\n                const bucketValue = captures[group.indices.bucket];\n                let pathValue = captures[group.indices.path];\n                if (!pathValue) {\n                    pathValue = '';\n                }\n                location = new Location(bucketValue, pathValue);\n                group.postModify(location);\n                break;\n            }\n        }\n        if (location == null) {\n            throw invalidUrl(url);\n        }\n        return location;\n    }\n}\n\n/**\n * A request whose promise always fails.\n */\nclass FailRequest {\n    constructor(error) {\n        this.promise_ = Promise.reject(error);\n    }\n    /** @inheritDoc */\n    getPromise() {\n        return this.promise_;\n    }\n    /** @inheritDoc */\n    cancel(_appDelete = false) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nfunction start(f, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\n    // type instead of a bunch of functions with state shared in the closure)\n    let waitSeconds = 1;\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let retryTimeoutId = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let globalTimeoutId = null;\n    let hitTimeout = false;\n    let cancelState = 0;\n    function canceled() {\n        return cancelState === 2;\n    }\n    let triggeredCallback = false;\n    function triggerCallback(...args) {\n        if (!triggeredCallback) {\n            triggeredCallback = true;\n            callback.apply(null, args);\n        }\n    }\n    function callWithDelay(millis) {\n        retryTimeoutId = setTimeout(() => {\n            retryTimeoutId = null;\n            f(handler, canceled());\n        }, millis);\n    }\n    function clearGlobalTimeout() {\n        if (globalTimeoutId) {\n            clearTimeout(globalTimeoutId);\n        }\n    }\n    function handler(success, ...args) {\n        if (triggeredCallback) {\n            clearGlobalTimeout();\n            return;\n        }\n        if (success) {\n            clearGlobalTimeout();\n            triggerCallback.call(null, success, ...args);\n            return;\n        }\n        const mustStop = canceled() || hitTimeout;\n        if (mustStop) {\n            clearGlobalTimeout();\n            triggerCallback.call(null, success, ...args);\n            return;\n        }\n        if (waitSeconds < 64) {\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n            waitSeconds *= 2;\n        }\n        let waitMillis;\n        if (cancelState === 1) {\n            cancelState = 2;\n            waitMillis = 0;\n        }\n        else {\n            waitMillis = (waitSeconds + Math.random()) * 1000;\n        }\n        callWithDelay(waitMillis);\n    }\n    let stopped = false;\n    function stop(wasTimeout) {\n        if (stopped) {\n            return;\n        }\n        stopped = true;\n        clearGlobalTimeout();\n        if (triggeredCallback) {\n            return;\n        }\n        if (retryTimeoutId !== null) {\n            if (!wasTimeout) {\n                cancelState = 2;\n            }\n            clearTimeout(retryTimeoutId);\n            callWithDelay(0);\n        }\n        else {\n            if (!wasTimeout) {\n                cancelState = 1;\n            }\n        }\n    }\n    callWithDelay(0);\n    globalTimeoutId = setTimeout(() => {\n        hitTimeout = true;\n        stop(true);\n    }, timeout);\n    return stop;\n}\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nfunction stop(id) {\n    id(false);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isJustDef(p) {\n    return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n    return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n    return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n    return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n    return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n    return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n    if (value < minValue) {\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n    }\n    if (value > maxValue) {\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction makeUrl(urlPart, host, protocol) {\n    let origin = host;\n    if (protocol == null) {\n        origin = `https://${host}`;\n    }\n    return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n    const encode = encodeURIComponent;\n    let queryPart = '?';\n    for (const key in params) {\n        if (params.hasOwnProperty(key)) {\n            const nextPart = encode(key) + '=' + encode(params[key]);\n            queryPart = queryPart + nextPart + '&';\n        }\n    }\n    // Chop off the extra '&' or '?' on the end\n    queryPart = queryPart.slice(0, -1);\n    return queryPart;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest {\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n        this.url_ = url_;\n        this.method_ = method_;\n        this.headers_ = headers_;\n        this.body_ = body_;\n        this.successCodes_ = successCodes_;\n        this.additionalRetryCodes_ = additionalRetryCodes_;\n        this.callback_ = callback_;\n        this.errorCallback_ = errorCallback_;\n        this.timeout_ = timeout_;\n        this.progressCallback_ = progressCallback_;\n        this.connectionFactory_ = connectionFactory_;\n        this.pendingConnection_ = null;\n        this.backoffId_ = null;\n        this.canceled_ = false;\n        this.appDelete_ = false;\n        this.promise_ = new Promise((resolve, reject) => {\n            this.resolve_ = resolve;\n            this.reject_ = reject;\n            this.start_();\n        });\n    }\n    /**\n     * Actually starts the retry loop.\n     */\n    start_() {\n        const doTheRequest = (backoffCallback, canceled) => {\n            if (canceled) {\n                backoffCallback(false, new RequestEndStatus(false, null, true));\n                return;\n            }\n            const connection = this.connectionFactory_();\n            this.pendingConnection_ = connection;\n            const progressListener = progressEvent => {\n                const loaded = progressEvent.loaded;\n                const total = progressEvent.lengthComputable\n                    ? progressEvent.total\n                    : -1;\n                if (this.progressCallback_ !== null) {\n                    this.progressCallback_(loaded, total);\n                }\n            };\n            if (this.progressCallback_ !== null) {\n                connection.addUploadProgressListener(progressListener);\n            }\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            connection\n                .send(this.url_, this.method_, this.body_, this.headers_)\n                .then(() => {\n                if (this.progressCallback_ !== null) {\n                    connection.removeUploadProgressListener(progressListener);\n                }\n                this.pendingConnection_ = null;\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n                const status = connection.getStatus();\n                if (!hitServer || this.isRetryStatusCode_(status)) {\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n                    return;\n                }\n                const successCode = this.successCodes_.indexOf(status) !== -1;\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\n            });\n        };\n        /**\n         * @param requestWentThrough - True if the request eventually went\n         *     through, false if it hit the retry limit or was canceled.\n         */\n        const backoffDone = (requestWentThrough, status) => {\n            const resolve = this.resolve_;\n            const reject = this.reject_;\n            const connection = status.connection;\n            if (status.wasSuccessCode) {\n                try {\n                    const result = this.callback_(connection, connection.getResponse());\n                    if (isJustDef(result)) {\n                        resolve(result);\n                    }\n                    else {\n                        resolve();\n                    }\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else {\n                if (connection !== null) {\n                    const err = unknown();\n                    err.serverResponse = connection.getErrorText();\n                    if (this.errorCallback_) {\n                        reject(this.errorCallback_(connection, err));\n                    }\n                    else {\n                        reject(err);\n                    }\n                }\n                else {\n                    if (status.canceled) {\n                        const err = this.appDelete_ ? appDeleted() : canceled();\n                        reject(err);\n                    }\n                    else {\n                        const err = retryLimitExceeded();\n                        reject(err);\n                    }\n                }\n            }\n        };\n        if (this.canceled_) {\n            backoffDone(false, new RequestEndStatus(false, null, true));\n        }\n        else {\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n        }\n    }\n    /** @inheritDoc */\n    getPromise() {\n        return this.promise_;\n    }\n    /** @inheritDoc */\n    cancel(appDelete) {\n        this.canceled_ = true;\n        this.appDelete_ = appDelete || false;\n        if (this.backoffId_ !== null) {\n            stop(this.backoffId_);\n        }\n        if (this.pendingConnection_ !== null) {\n            this.pendingConnection_.abort();\n        }\n    }\n    isRetryStatusCode_(status) {\n        // The codes for which to retry came from this page:\n        // https://cloud.google.com/storage/docs/exponential-backoff\n        const isFiveHundredCode = status >= 500 && status < 600;\n        const extraRetryCodes = [\n            // Request Timeout: web server didn't receive full request in time.\n            408,\n            // Too Many Requests: you're getting rate-limited, basically.\n            429\n        ];\n        const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n        const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n    }\n}\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nclass RequestEndStatus {\n    constructor(wasSuccessCode, connection, canceled) {\n        this.wasSuccessCode = wasSuccessCode;\n        this.connection = connection;\n        this.canceled = !!canceled;\n    }\n}\nfunction addAuthHeader_(headers, authToken) {\n    if (authToken !== null && authToken.length > 0) {\n        headers['Authorization'] = 'Firebase ' + authToken;\n    }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n    headers['X-Firebase-Storage-Version'] =\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n    if (appId) {\n        headers['X-Firebase-GMPID'] = appId;\n    }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n    if (appCheckToken !== null) {\n        headers['X-Firebase-AppCheck'] = appCheckToken;\n    }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n    const queryPart = makeQueryString(requestInfo.urlParams);\n    const url = requestInfo.url + queryPart;\n    const headers = Object.assign({}, requestInfo.headers);\n    addGmpidHeader_(headers, appId);\n    addAuthHeader_(headers, authToken);\n    addVersionHeader_(headers, firebaseVersion);\n    addAppCheckHeader_(headers, appCheckToken);\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getBlobBuilder() {\n    if (typeof BlobBuilder !== 'undefined') {\n        return BlobBuilder;\n    }\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\n        return WebKitBlobBuilder;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nfunction getBlob$1(...args) {\n    const BlobBuilder = getBlobBuilder();\n    if (BlobBuilder !== undefined) {\n        const bb = new BlobBuilder();\n        for (let i = 0; i < args.length; i++) {\n            bb.append(args[i]);\n        }\n        return bb.getBlob();\n    }\n    else {\n        if (isNativeBlobDefined()) {\n            return new Blob(args);\n        }\n        else {\n            throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\n        }\n    }\n}\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nfunction sliceBlob(blob, start, end) {\n    if (blob.webkitSlice) {\n        return blob.webkitSlice(start, end);\n    }\n    else if (blob.mozSlice) {\n        return blob.mozSlice(start, end);\n    }\n    else if (blob.slice) {\n        return blob.slice(start, end);\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n    return atob(encoded);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nconst StringFormat = {\n    /**\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n     * sequence.\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n     */\n    RAW: 'raw',\n    /**\n     * Indicates the string should be interpreted as base64-encoded data.\n     * Padding characters (trailing '='s) are optional.\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n     * ad 69 8e fb e1 3a b7 bf eb 97\n     */\n    BASE64: 'base64',\n    /**\n     * Indicates the string should be interpreted as base64url-encoded data.\n     * Padding characters (trailing '='s) are optional.\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n     * ad 69 8e fb e1 3a b7 bf eb 97\n     */\n    BASE64URL: 'base64url',\n    /**\n     * Indicates the string is a data URL, such as one obtained from\n     * canvas.toDataURL().\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\n     * becomes the byte sequence\n     * 69 a6 9a\n     * (the content-type \"application/octet-stream\" is also applied, but can\n     * be overridden in the metadata object).\n     */\n    DATA_URL: 'data_url'\n};\nclass StringData {\n    constructor(data, contentType) {\n        this.data = data;\n        this.contentType = contentType || null;\n    }\n}\n/**\n * @internal\n */\nfunction dataFromString(format, stringData) {\n    switch (format) {\n        case StringFormat.RAW:\n            return new StringData(utf8Bytes_(stringData));\n        case StringFormat.BASE64:\n        case StringFormat.BASE64URL:\n            return new StringData(base64Bytes_(format, stringData));\n        case StringFormat.DATA_URL:\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n        // do nothing\n    }\n    // assert(false);\n    throw unknown();\n}\nfunction utf8Bytes_(value) {\n    const b = [];\n    for (let i = 0; i < value.length; i++) {\n        let c = value.charCodeAt(i);\n        if (c <= 127) {\n            b.push(c);\n        }\n        else {\n            if (c <= 2047) {\n                b.push(192 | (c >> 6), 128 | (c & 63));\n            }\n            else {\n                if ((c & 64512) === 55296) {\n                    // The start of a surrogate pair.\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n                    if (!valid) {\n                        // The second surrogate wasn't there.\n                        b.push(239, 191, 189);\n                    }\n                    else {\n                        const hi = c;\n                        const lo = value.charCodeAt(++i);\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\n                    }\n                }\n                else {\n                    if ((c & 64512) === 56320) {\n                        // Invalid low surrogate.\n                        b.push(239, 191, 189);\n                    }\n                    else {\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n                    }\n                }\n            }\n        }\n    }\n    return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n    let decoded;\n    try {\n        decoded = decodeURIComponent(value);\n    }\n    catch (e) {\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n    }\n    return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n    switch (format) {\n        case StringFormat.BASE64: {\n            const hasMinus = value.indexOf('-') !== -1;\n            const hasUnder = value.indexOf('_') !== -1;\n            if (hasMinus || hasUnder) {\n                const invalidChar = hasMinus ? '-' : '_';\n                throw invalidFormat(format, \"Invalid character '\" +\n                    invalidChar +\n                    \"' found: is it base64url encoded?\");\n            }\n            break;\n        }\n        case StringFormat.BASE64URL: {\n            const hasPlus = value.indexOf('+') !== -1;\n            const hasSlash = value.indexOf('/') !== -1;\n            if (hasPlus || hasSlash) {\n                const invalidChar = hasPlus ? '+' : '/';\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n            }\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\n            break;\n        }\n        // do nothing\n    }\n    let bytes;\n    try {\n        bytes = decodeBase64(value);\n    }\n    catch (e) {\n        throw invalidFormat(format, 'Invalid character found');\n    }\n    const array = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        array[i] = bytes.charCodeAt(i);\n    }\n    return array;\n}\nclass DataURLParts {\n    constructor(dataURL) {\n        this.base64 = false;\n        this.contentType = null;\n        const matches = dataURL.match(/^data:([^,]+)?,/);\n        if (matches === null) {\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n        }\n        const middle = matches[1] || null;\n        if (middle != null) {\n            this.base64 = endsWith(middle, ';base64');\n            this.contentType = this.base64\n                ? middle.substring(0, middle.length - ';base64'.length)\n                : middle;\n        }\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n    }\n}\nfunction dataURLBytes_(dataUrl) {\n    const parts = new DataURLParts(dataUrl);\n    if (parts.base64) {\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\n    }\n    else {\n        return percentEncodedBytes_(parts.rest);\n    }\n}\nfunction dataURLContentType_(dataUrl) {\n    const parts = new DataURLParts(dataUrl);\n    return parts.contentType;\n}\nfunction endsWith(s, end) {\n    const longEnough = s.length >= end.length;\n    if (!longEnough) {\n        return false;\n    }\n    return s.substring(s.length - end.length) === end;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nclass FbsBlob {\n    constructor(data, elideCopy) {\n        let size = 0;\n        let blobType = '';\n        if (isNativeBlob(data)) {\n            this.data_ = data;\n            size = data.size;\n            blobType = data.type;\n        }\n        else if (data instanceof ArrayBuffer) {\n            if (elideCopy) {\n                this.data_ = new Uint8Array(data);\n            }\n            else {\n                this.data_ = new Uint8Array(data.byteLength);\n                this.data_.set(new Uint8Array(data));\n            }\n            size = this.data_.length;\n        }\n        else if (data instanceof Uint8Array) {\n            if (elideCopy) {\n                this.data_ = data;\n            }\n            else {\n                this.data_ = new Uint8Array(data.length);\n                this.data_.set(data);\n            }\n            size = data.length;\n        }\n        this.size_ = size;\n        this.type_ = blobType;\n    }\n    size() {\n        return this.size_;\n    }\n    type() {\n        return this.type_;\n    }\n    slice(startByte, endByte) {\n        if (isNativeBlob(this.data_)) {\n            const realBlob = this.data_;\n            const sliced = sliceBlob(realBlob, startByte, endByte);\n            if (sliced === null) {\n                return null;\n            }\n            return new FbsBlob(sliced);\n        }\n        else {\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n            return new FbsBlob(slice, true);\n        }\n    }\n    static getBlob(...args) {\n        if (isNativeBlobDefined()) {\n            const blobby = args.map((val) => {\n                if (val instanceof FbsBlob) {\n                    return val.data_;\n                }\n                else {\n                    return val;\n                }\n            });\n            return new FbsBlob(getBlob$1.apply(null, blobby));\n        }\n        else {\n            const uint8Arrays = args.map((val) => {\n                if (isString(val)) {\n                    return dataFromString(StringFormat.RAW, val).data;\n                }\n                else {\n                    // Blobs don't exist, so this has to be a Uint8Array.\n                    return val.data_;\n                }\n            });\n            let finalLength = 0;\n            uint8Arrays.forEach((array) => {\n                finalLength += array.byteLength;\n            });\n            const merged = new Uint8Array(finalLength);\n            let index = 0;\n            uint8Arrays.forEach((array) => {\n                for (let i = 0; i < array.length; i++) {\n                    merged[index++] = array[i];\n                }\n            });\n            return new FbsBlob(merged, true);\n        }\n    }\n    uploadData() {\n        return this.data_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nfunction jsonObjectOrNull(s) {\n    let obj;\n    try {\n        obj = JSON.parse(s);\n    }\n    catch (e) {\n        return null;\n    }\n    if (isNonArrayObject(obj)) {\n        return obj;\n    }\n    else {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n/**\n * @return Null if the path is already at the root.\n */\nfunction parent(path) {\n    if (path.length === 0) {\n        return null;\n    }\n    const index = path.lastIndexOf('/');\n    if (index === -1) {\n        return '';\n    }\n    const newPath = path.slice(0, index);\n    return newPath;\n}\nfunction child(path, childPath) {\n    const canonicalChildPath = childPath\n        .split('/')\n        .filter(component => component.length > 0)\n        .join('/');\n    if (path.length === 0) {\n        return canonicalChildPath;\n    }\n    else {\n        return path + '/' + canonicalChildPath;\n    }\n}\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nfunction lastComponent(path) {\n    const index = path.lastIndexOf('/', path.length - 2);\n    if (index === -1) {\n        return path;\n    }\n    else {\n        return path.slice(index + 1);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction noXform_(metadata, value) {\n    return value;\n}\nclass Mapping {\n    constructor(server, local, writable, xform) {\n        this.server = server;\n        this.local = local || server;\n        this.writable = !!writable;\n        this.xform = xform || noXform_;\n    }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n    if (!isString(fullPath) || fullPath.length < 2) {\n        return fullPath;\n    }\n    else {\n        return lastComponent(fullPath);\n    }\n}\nfunction getMappings() {\n    if (mappings_) {\n        return mappings_;\n    }\n    const mappings = [];\n    mappings.push(new Mapping('bucket'));\n    mappings.push(new Mapping('generation'));\n    mappings.push(new Mapping('metageneration'));\n    mappings.push(new Mapping('name', 'fullPath', true));\n    function mappingsXformPath(_metadata, fullPath) {\n        return xformPath(fullPath);\n    }\n    const nameMapping = new Mapping('name');\n    nameMapping.xform = mappingsXformPath;\n    mappings.push(nameMapping);\n    /**\n     * Coerces the second param to a number, if it is defined.\n     */\n    function xformSize(_metadata, size) {\n        if (size !== undefined) {\n            return Number(size);\n        }\n        else {\n            return size;\n        }\n    }\n    const sizeMapping = new Mapping('size');\n    sizeMapping.xform = xformSize;\n    mappings.push(sizeMapping);\n    mappings.push(new Mapping('timeCreated'));\n    mappings.push(new Mapping('updated'));\n    mappings.push(new Mapping('md5Hash', null, true));\n    mappings.push(new Mapping('cacheControl', null, true));\n    mappings.push(new Mapping('contentDisposition', null, true));\n    mappings.push(new Mapping('contentEncoding', null, true));\n    mappings.push(new Mapping('contentLanguage', null, true));\n    mappings.push(new Mapping('contentType', null, true));\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\n    mappings_ = mappings;\n    return mappings_;\n}\nfunction addRef(metadata, service) {\n    function generateRef() {\n        const bucket = metadata['bucket'];\n        const path = metadata['fullPath'];\n        const loc = new Location(bucket, path);\n        return service._makeStorageReference(loc);\n    }\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\nfunction fromResource(service, resource, mappings) {\n    const metadata = {};\n    metadata['type'] = 'file';\n    const len = mappings.length;\n    for (let i = 0; i < len; i++) {\n        const mapping = mappings[i];\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n    }\n    addRef(metadata, service);\n    return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    const resource = obj;\n    return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    if (!isString(obj['downloadTokens'])) {\n        // This can happen if objects are uploaded through GCS and retrieved\n        // through list, so we don't want to throw an Error.\n        return null;\n    }\n    const tokens = obj['downloadTokens'];\n    if (tokens.length === 0) {\n        return null;\n    }\n    const encode = encodeURIComponent;\n    const tokensList = tokens.split(',');\n    const urls = tokensList.map((token) => {\n        const bucket = metadata['bucket'];\n        const path = metadata['fullPath'];\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n        const base = makeUrl(urlPart, host, protocol);\n        const queryString = makeQueryString({\n            alt: 'media',\n            token\n        });\n        return base + queryString;\n    });\n    return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n    const resource = {};\n    const len = mappings.length;\n    for (let i = 0; i < len; i++) {\n        const mapping = mappings[i];\n        if (mapping.writable) {\n            resource[mapping.server] = metadata[mapping.local];\n        }\n    }\n    return JSON.stringify(resource);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n    const listResult = {\n        prefixes: [],\n        items: [],\n        nextPageToken: resource['nextPageToken']\n    };\n    if (resource[PREFIXES_KEY]) {\n        for (const path of resource[PREFIXES_KEY]) {\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n            listResult.prefixes.push(reference);\n        }\n    }\n    if (resource[ITEMS_KEY]) {\n        for (const item of resource[ITEMS_KEY]) {\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\n            listResult.items.push(reference);\n        }\n    }\n    return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    const resource = obj;\n    return fromBackendResponse(service, bucket, resource);\n}\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nclass RequestInfo {\n    constructor(url, method, \n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    handler, timeout) {\n        this.url = url;\n        this.method = method;\n        this.handler = handler;\n        this.timeout = timeout;\n        this.urlParams = {};\n        this.headers = {};\n        this.body = null;\n        this.errorHandler = null;\n        /**\n         * Called with the current number of bytes uploaded and total size (-1 if not\n         * computable) of the request body (i.e. used to report upload progress).\n         */\n        this.progressCallback = null;\n        this.successCodes = [200];\n        this.additionalRetryCodes = [];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nfunction handlerCheck(cndn) {\n    if (!cndn) {\n        throw unknown();\n    }\n}\nfunction metadataHandler(service, mappings) {\n    function handler(xhr, text) {\n        const metadata = fromResourceString(service, text, mappings);\n        handlerCheck(metadata !== null);\n        return metadata;\n    }\n    return handler;\n}\nfunction listHandler(service, bucket) {\n    function handler(xhr, text) {\n        const listResult = fromResponseString(service, bucket, text);\n        handlerCheck(listResult !== null);\n        return listResult;\n    }\n    return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n    function handler(xhr, text) {\n        const metadata = fromResourceString(service, text, mappings);\n        handlerCheck(metadata !== null);\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n    }\n    return handler;\n}\nfunction sharedErrorHandler(location) {\n    function errorHandler(xhr, err) {\n        let newErr;\n        if (xhr.getStatus() === 401) {\n            if (\n            // This exact message string is the only consistent part of the\n            // server's error response that identifies it as an App Check error.\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n                newErr = unauthorizedApp();\n            }\n            else {\n                newErr = unauthenticated();\n            }\n        }\n        else {\n            if (xhr.getStatus() === 402) {\n                newErr = quotaExceeded(location.bucket);\n            }\n            else {\n                if (xhr.getStatus() === 403) {\n                    newErr = unauthorized(location.path);\n                }\n                else {\n                    newErr = err;\n                }\n            }\n        }\n        newErr.serverResponse = err.serverResponse;\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction objectErrorHandler(location) {\n    const shared = sharedErrorHandler(location);\n    function errorHandler(xhr, err) {\n        let newErr = shared(xhr, err);\n        if (xhr.getStatus() === 404) {\n            newErr = objectNotFound(location.path);\n        }\n        newErr.serverResponse = err.serverResponse;\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n    const urlParams = {};\n    if (location.isRoot) {\n        urlParams['prefix'] = '';\n    }\n    else {\n        urlParams['prefix'] = location.path + '/';\n    }\n    if (delimiter && delimiter.length > 0) {\n        urlParams['delimiter'] = delimiter;\n    }\n    if (pageToken) {\n        urlParams['pageToken'] = pageToken;\n    }\n    if (maxResults) {\n        urlParams['maxResults'] = maxResults;\n    }\n    const urlPart = location.bucketOnlyServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    if (maxDownloadSizeBytes !== undefined) {\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n    }\n    return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'PATCH';\n    const body = toResourceString(metadata, mappings);\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'DELETE';\n    const timeout = service.maxOperationRetryTime;\n    function handler(_xhr, _text) { }\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.successCodes = [200, 204];\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n    return ((metadata && metadata['contentType']) ||\n        (blob && blob.type()) ||\n        'application/octet-stream');\n}\nfunction metadataForUpload_(location, blob, metadata) {\n    const metadataClone = Object.assign({}, metadata);\n    metadataClone['fullPath'] = location.path;\n    metadataClone['size'] = blob.size();\n    if (!metadataClone['contentType']) {\n        metadataClone['contentType'] = determineContentType_(null, blob);\n    }\n    return metadataClone;\n}\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n    const urlPart = location.bucketOnlyServerUrl();\n    const headers = {\n        'X-Goog-Upload-Protocol': 'multipart'\n    };\n    function genBoundary() {\n        let str = '';\n        for (let i = 0; i < 2; i++) {\n            str = str + Math.random().toString().slice(2);\n        }\n        return str;\n    }\n    const boundary = genBoundary();\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n    const metadata_ = metadataForUpload_(location, blob, metadata);\n    const metadataString = toResourceString(metadata_, mappings);\n    const preBlobPart = '--' +\n        boundary +\n        '\\r\\n' +\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n        metadataString +\n        '\\r\\n--' +\n        boundary +\n        '\\r\\n' +\n        'Content-Type: ' +\n        metadata_['contentType'] +\n        '\\r\\n\\r\\n';\n    const postBlobPart = '\\r\\n--' + boundary + '--';\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n    if (body === null) {\n        throw cannotSliceBlob();\n    }\n    const urlParams = { name: metadata_['fullPath'] };\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'POST';\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nclass ResumableUploadStatus {\n    constructor(current, total, finalized, metadata) {\n        this.current = current;\n        this.total = total;\n        this.finalized = !!finalized;\n        this.metadata = metadata || null;\n    }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n    let status = null;\n    try {\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\n    }\n    catch (e) {\n        handlerCheck(false);\n    }\n    const allowedStatus = allowed || ['active'];\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n    return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n    const urlPart = location.bucketOnlyServerUrl();\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\n    const urlParams = { name: metadataForUpload['fullPath'] };\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'POST';\n    const headers = {\n        'X-Goog-Upload-Protocol': 'resumable',\n        'X-Goog-Upload-Command': 'start',\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n        'Content-Type': 'application/json; charset=utf-8'\n    };\n    const body = toResourceString(metadataForUpload, mappings);\n    const timeout = service.maxUploadRetryTime;\n    function handler(xhr) {\n        checkResumeHeader_(xhr);\n        let url;\n        try {\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\n        }\n        catch (e) {\n            handlerCheck(false);\n        }\n        handlerCheck(isString(url));\n        return url;\n    }\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n    const headers = { 'X-Goog-Upload-Command': 'query' };\n    function handler(xhr) {\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\n        let sizeString = null;\n        try {\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n        }\n        catch (e) {\n            handlerCheck(false);\n        }\n        if (!sizeString) {\n            // null or empty string\n            handlerCheck(false);\n        }\n        const size = Number(sizeString);\n        handlerCheck(!isNaN(size));\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\n    }\n    const method = 'POST';\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n    // TODO(andysoto): standardize on internal asserts\n    // assert(!(opt_status && opt_status.finalized));\n    const status_ = new ResumableUploadStatus(0, 0);\n    if (status) {\n        status_.current = status.current;\n        status_.total = status.total;\n    }\n    else {\n        status_.current = 0;\n        status_.total = blob.size();\n    }\n    if (blob.size() !== status_.total) {\n        throw serverFileWrongSize();\n    }\n    const bytesLeft = status_.total - status_.current;\n    let bytesToUpload = bytesLeft;\n    if (chunkSize > 0) {\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\n    }\n    const startByte = status_.current;\n    const endByte = startByte + bytesToUpload;\n    const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n    const headers = {\n        'X-Goog-Upload-Command': uploadCommand,\n        'X-Goog-Upload-Offset': `${status_.current}`\n    };\n    const body = blob.slice(startByte, endByte);\n    if (body === null) {\n        throw cannotSliceBlob();\n    }\n    function handler(xhr, text) {\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\n        // the 'x-range-md5' header comes back with status code 308 responses.\n        // We'll only be able to bail out though, because you can't re-upload a\n        // range that you previously uploaded.\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n        const newCurrent = status_.current + bytesToUpload;\n        const size = blob.size();\n        let metadata;\n        if (uploadStatus === 'final') {\n            metadata = metadataHandler(service, mappings)(xhr, text);\n        }\n        else {\n            metadata = null;\n        }\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n    }\n    const method = 'POST';\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.progressCallback = progressCallback || null;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An event that is triggered on a task.\n * @internal\n */\nconst TaskEvent = {\n    /**\n     * For this event,\n     * <ul>\n     *   <li>The `next` function is triggered on progress updates and when the\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n     *       argument.</li>\n     *   <li>The `error` function is triggered if the upload is canceled or fails\n     *       for another reason.</li>\n     *   <li>The `complete` function is triggered if the upload completes\n     *       successfully.</li>\n     * </ul>\n     */\n    STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nconst TaskState = {\n    /** The task is currently transferring data. */\n    RUNNING: 'running',\n    /** The task was paused by the user. */\n    PAUSED: 'paused',\n    /** The task completed successfully. */\n    SUCCESS: 'success',\n    /** The task was canceled. */\n    CANCELED: 'canceled',\n    /** The task failed with an error. */\n    ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n    switch (state) {\n        case \"running\" /* RUNNING */:\n        case \"pausing\" /* PAUSING */:\n        case \"canceling\" /* CANCELING */:\n            return TaskState.RUNNING;\n        case \"paused\" /* PAUSED */:\n            return TaskState.PAUSED;\n        case \"success\" /* SUCCESS */:\n            return TaskState.SUCCESS;\n        case \"canceled\" /* CANCELED */:\n            return TaskState.CANCELED;\n        case \"error\" /* ERROR */:\n            return TaskState.ERROR;\n        default:\n            // TODO(andysoto): assert(false);\n            return TaskState.ERROR;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Observer {\n    constructor(nextOrObserver, error, complete) {\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n        if (asFunctions) {\n            this.next = nextOrObserver;\n            this.error = error !== null && error !== void 0 ? error : undefined;\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n        }\n        else {\n            const observer = nextOrObserver;\n            this.next = observer.next;\n            this.error = observer.error;\n            this.complete = observer.complete;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n    return (...argsToForward) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.resolve().then(() => f(...argsToForward));\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride = null;\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nclass XhrConnection {\n    constructor() {\n        this.sent_ = false;\n        this.xhr_ = new XMLHttpRequest();\n        this.initXhr();\n        this.errorCode_ = ErrorCode.NO_ERROR;\n        this.sendPromise_ = new Promise(resolve => {\n            this.xhr_.addEventListener('abort', () => {\n                this.errorCode_ = ErrorCode.ABORT;\n                resolve();\n            });\n            this.xhr_.addEventListener('error', () => {\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\n                resolve();\n            });\n            this.xhr_.addEventListener('load', () => {\n                resolve();\n            });\n        });\n    }\n    send(url, method, body, headers) {\n        if (this.sent_) {\n            throw internalError('cannot .send() more than once');\n        }\n        this.sent_ = true;\n        this.xhr_.open(method, url, true);\n        if (headers !== undefined) {\n            for (const key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\n                }\n            }\n        }\n        if (body !== undefined) {\n            this.xhr_.send(body);\n        }\n        else {\n            this.xhr_.send();\n        }\n        return this.sendPromise_;\n    }\n    getErrorCode() {\n        if (!this.sent_) {\n            throw internalError('cannot .getErrorCode() before sending');\n        }\n        return this.errorCode_;\n    }\n    getStatus() {\n        if (!this.sent_) {\n            throw internalError('cannot .getStatus() before sending');\n        }\n        try {\n            return this.xhr_.status;\n        }\n        catch (e) {\n            return -1;\n        }\n    }\n    getResponse() {\n        if (!this.sent_) {\n            throw internalError('cannot .getResponse() before sending');\n        }\n        return this.xhr_.response;\n    }\n    getErrorText() {\n        if (!this.sent_) {\n            throw internalError('cannot .getErrorText() before sending');\n        }\n        return this.xhr_.statusText;\n    }\n    /** Aborts the request. */\n    abort() {\n        this.xhr_.abort();\n    }\n    getResponseHeader(header) {\n        return this.xhr_.getResponseHeader(header);\n    }\n    addUploadProgressListener(listener) {\n        if (this.xhr_.upload != null) {\n            this.xhr_.upload.addEventListener('progress', listener);\n        }\n    }\n    removeUploadProgressListener(listener) {\n        if (this.xhr_.upload != null) {\n            this.xhr_.upload.removeEventListener('progress', listener);\n        }\n    }\n}\nclass XhrTextConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = 'text';\n    }\n}\nfunction newTextConnection() {\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = 'arraybuffer';\n    }\n}\nfunction newBytesConnection() {\n    return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = 'blob';\n    }\n}\nfunction newBlobConnection() {\n    return new XhrBlobConnection();\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nclass UploadTask {\n    /**\n     * @param ref - The firebaseStorage.Reference object this task came\n     *     from, untyped to avoid cyclic dependencies.\n     * @param blob - The blob to upload.\n     */\n    constructor(ref, blob, metadata = null) {\n        /**\n         * Number of bytes transferred so far.\n         */\n        this._transferred = 0;\n        this._needToFetchStatus = false;\n        this._needToFetchMetadata = false;\n        this._observers = [];\n        this._error = undefined;\n        this._uploadUrl = undefined;\n        this._request = undefined;\n        this._chunkMultiplier = 1;\n        this._resolve = undefined;\n        this._reject = undefined;\n        this._ref = ref;\n        this._blob = blob;\n        this._metadata = metadata;\n        this._mappings = getMappings();\n        this._resumable = this._shouldDoResumable(this._blob);\n        this._state = \"running\" /* RUNNING */;\n        this._errorHandler = error => {\n            this._request = undefined;\n            this._chunkMultiplier = 1;\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n                this._needToFetchStatus = true;\n                this.completeTransitions_();\n            }\n            else {\n                this._error = error;\n                this._transition(\"error\" /* ERROR */);\n            }\n        };\n        this._metadataErrorHandler = error => {\n            this._request = undefined;\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n                this.completeTransitions_();\n            }\n            else {\n                this._error = error;\n                this._transition(\"error\" /* ERROR */);\n            }\n        };\n        this._promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n            this._start();\n        });\n        // Prevent uncaught rejections on the internal promise from bubbling out\n        // to the top level with a dummy handler.\n        this._promise.then(null, () => { });\n    }\n    _makeProgressCallback() {\n        const sizeBefore = this._transferred;\n        return loaded => this._updateProgress(sizeBefore + loaded);\n    }\n    _shouldDoResumable(blob) {\n        return blob.size() > 256 * 1024;\n    }\n    _start() {\n        if (this._state !== \"running\" /* RUNNING */) {\n            // This can happen if someone pauses us in a resume callback, for example.\n            return;\n        }\n        if (this._request !== undefined) {\n            return;\n        }\n        if (this._resumable) {\n            if (this._uploadUrl === undefined) {\n                this._createResumable();\n            }\n            else {\n                if (this._needToFetchStatus) {\n                    this._fetchStatus();\n                }\n                else {\n                    if (this._needToFetchMetadata) {\n                        // Happens if we miss the metadata on upload completion.\n                        this._fetchMetadata();\n                    }\n                    else {\n                        this._continueUpload();\n                    }\n                }\n            }\n        }\n        else {\n            this._oneShotUpload();\n        }\n    }\n    _resolveToken(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.all([\n            this._ref.storage._getAuthToken(),\n            this._ref.storage._getAppCheckToken()\n        ]).then(([authToken, appCheckToken]) => {\n            switch (this._state) {\n                case \"running\" /* RUNNING */:\n                    callback(authToken, appCheckToken);\n                    break;\n                case \"canceling\" /* CANCELING */:\n                    this._transition(\"canceled\" /* CANCELED */);\n                    break;\n                case \"pausing\" /* PAUSING */:\n                    this._transition(\"paused\" /* PAUSED */);\n                    break;\n            }\n        });\n    }\n    // TODO(andysoto): assert false\n    _createResumable() {\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = createRequest;\n            createRequest.getPromise().then((url) => {\n                this._request = undefined;\n                this._uploadUrl = url;\n                this._needToFetchStatus = false;\n                this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _fetchStatus() {\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        const url = this._uploadUrl;\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = statusRequest;\n            statusRequest.getPromise().then(status => {\n                status = status;\n                this._request = undefined;\n                this._updateProgress(status.current);\n                this._needToFetchStatus = false;\n                if (status.finalized) {\n                    this._needToFetchMetadata = true;\n                }\n                this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _continueUpload() {\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        const url = this._uploadUrl;\n        this._resolveToken((authToken, appCheckToken) => {\n            let requestInfo;\n            try {\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n            }\n            catch (e) {\n                this._error = e;\n                this._transition(\"error\" /* ERROR */);\n                return;\n            }\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = uploadRequest;\n            uploadRequest.getPromise().then((newStatus) => {\n                this._increaseMultiplier();\n                this._request = undefined;\n                this._updateProgress(newStatus.current);\n                if (newStatus.finalized) {\n                    this._metadata = newStatus.metadata;\n                    this._transition(\"success\" /* SUCCESS */);\n                }\n                else {\n                    this.completeTransitions_();\n                }\n            }, this._errorHandler);\n        });\n    }\n    _increaseMultiplier() {\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n        // Max chunk size is 32M.\n        if (currentSize < 32 * 1024 * 1024) {\n            this._chunkMultiplier *= 2;\n        }\n    }\n    _fetchMetadata() {\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = metadataRequest;\n            metadataRequest.getPromise().then(metadata => {\n                this._request = undefined;\n                this._metadata = metadata;\n                this._transition(\"success\" /* SUCCESS */);\n            }, this._metadataErrorHandler);\n        });\n    }\n    _oneShotUpload() {\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = multipartRequest;\n            multipartRequest.getPromise().then(metadata => {\n                this._request = undefined;\n                this._metadata = metadata;\n                this._updateProgress(this._blob.size());\n                this._transition(\"success\" /* SUCCESS */);\n            }, this._errorHandler);\n        });\n    }\n    _updateProgress(transferred) {\n        const old = this._transferred;\n        this._transferred = transferred;\n        // A progress update can make the \"transferred\" value smaller (e.g. a\n        // partial upload not completed by server, after which the \"transferred\"\n        // value may reset to the value at the beginning of the request).\n        if (this._transferred !== old) {\n            this._notifyObservers();\n        }\n    }\n    _transition(state) {\n        if (this._state === state) {\n            return;\n        }\n        switch (state) {\n            case \"canceling\" /* CANCELING */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                this._state = state;\n                if (this._request !== undefined) {\n                    this._request.cancel();\n                }\n                break;\n            case \"pausing\" /* PAUSING */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING);\n                this._state = state;\n                if (this._request !== undefined) {\n                    this._request.cancel();\n                }\n                break;\n            case \"running\" /* RUNNING */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                const wasPaused = this._state === \"paused\" /* PAUSED */;\n                this._state = state;\n                if (wasPaused) {\n                    this._notifyObservers();\n                    this._start();\n                }\n                break;\n            case \"paused\" /* PAUSED */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"canceled\" /* CANCELED */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._error = canceled();\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"error\" /* ERROR */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"success\" /* SUCCESS */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n        }\n    }\n    completeTransitions_() {\n        switch (this._state) {\n            case \"pausing\" /* PAUSING */:\n                this._transition(\"paused\" /* PAUSED */);\n                break;\n            case \"canceling\" /* CANCELING */:\n                this._transition(\"canceled\" /* CANCELED */);\n                break;\n            case \"running\" /* RUNNING */:\n                this._start();\n                break;\n        }\n    }\n    /**\n     * A snapshot of the current task state.\n     */\n    get snapshot() {\n        const externalState = taskStateFromInternalTaskState(this._state);\n        return {\n            bytesTransferred: this._transferred,\n            totalBytes: this._blob.size(),\n            state: externalState,\n            metadata: this._metadata,\n            task: this,\n            ref: this._ref\n        };\n    }\n    /**\n     * Adds a callback for an event.\n     * @param type - The type of event to listen for.\n     * @param nextOrObserver -\n     *     The `next` function, which gets called for each item in\n     *     the event stream, or an observer object with some or all of these three\n     *     properties (`next`, `error`, `complete`).\n     * @param error - A function that gets called with a `StorageError`\n     *     if the event stream ends due to an error.\n     * @param completed - A function that gets called if the\n     *     event stream ends normally.\n     * @returns\n     *     If only the event argument is passed, returns a function you can use to\n     *     add callbacks (see the examples above). If more than just the event\n     *     argument is passed, returns a function you can call to unregister the\n     *     callbacks.\n     */\n    on(type, nextOrObserver, error, completed) {\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n        this._addObserver(observer);\n        return () => {\n            this._removeObserver(observer);\n        };\n    }\n    /**\n     * This object behaves like a Promise, and resolves with its snapshot data\n     * when the upload completes.\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n     * @param onRejected - The rejection callback.\n     */\n    then(onFulfilled, onRejected) {\n        // These casts are needed so that TypeScript can infer the types of the\n        // resulting Promise.\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    /**\n     * Equivalent to calling `then(null, onRejected)`.\n     */\n    catch(onRejected) {\n        return this.then(null, onRejected);\n    }\n    /**\n     * Adds the given observer.\n     */\n    _addObserver(observer) {\n        this._observers.push(observer);\n        this._notifyObserver(observer);\n    }\n    /**\n     * Removes the given observer.\n     */\n    _removeObserver(observer) {\n        const i = this._observers.indexOf(observer);\n        if (i !== -1) {\n            this._observers.splice(i, 1);\n        }\n    }\n    _notifyObservers() {\n        this._finishPromise();\n        const observers = this._observers.slice();\n        observers.forEach(observer => {\n            this._notifyObserver(observer);\n        });\n    }\n    _finishPromise() {\n        if (this._resolve !== undefined) {\n            let triggered = true;\n            switch (taskStateFromInternalTaskState(this._state)) {\n                case TaskState.SUCCESS:\n                    async(this._resolve.bind(null, this.snapshot))();\n                    break;\n                case TaskState.CANCELED:\n                case TaskState.ERROR:\n                    const toCall = this._reject;\n                    async(toCall.bind(null, this._error))();\n                    break;\n                default:\n                    triggered = false;\n                    break;\n            }\n            if (triggered) {\n                this._resolve = undefined;\n                this._reject = undefined;\n            }\n        }\n    }\n    _notifyObserver(observer) {\n        const externalState = taskStateFromInternalTaskState(this._state);\n        switch (externalState) {\n            case TaskState.RUNNING:\n            case TaskState.PAUSED:\n                if (observer.next) {\n                    async(observer.next.bind(observer, this.snapshot))();\n                }\n                break;\n            case TaskState.SUCCESS:\n                if (observer.complete) {\n                    async(observer.complete.bind(observer))();\n                }\n                break;\n            case TaskState.CANCELED:\n            case TaskState.ERROR:\n                if (observer.error) {\n                    async(observer.error.bind(observer, this._error))();\n                }\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                if (observer.error) {\n                    async(observer.error.bind(observer, this._error))();\n                }\n        }\n    }\n    /**\n     * Resumes a paused task. Has no effect on a currently running or failed task.\n     * @returns True if the operation took effect, false if ignored.\n     */\n    resume() {\n        const valid = this._state === \"paused\" /* PAUSED */ ||\n            this._state === \"pausing\" /* PAUSING */;\n        if (valid) {\n            this._transition(\"running\" /* RUNNING */);\n        }\n        return valid;\n    }\n    /**\n     * Pauses a currently running task. Has no effect on a paused or failed task.\n     * @returns True if the operation took effect, false if ignored.\n     */\n    pause() {\n        const valid = this._state === \"running\" /* RUNNING */;\n        if (valid) {\n            this._transition(\"pausing\" /* PAUSING */);\n        }\n        return valid;\n    }\n    /**\n     * Cancels a currently running or paused task. Has no effect on a complete or\n     * failed task.\n     * @returns True if the operation took effect, false if ignored.\n     */\n    cancel() {\n        const valid = this._state === \"running\" /* RUNNING */ ||\n            this._state === \"pausing\" /* PAUSING */;\n        if (valid) {\n            this._transition(\"canceling\" /* CANCELING */);\n        }\n        return valid;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nclass Reference {\n    constructor(_service, location) {\n        this._service = _service;\n        if (location instanceof Location) {\n            this._location = location;\n        }\n        else {\n            this._location = Location.makeFromUrl(location, _service.host);\n        }\n    }\n    /**\n     * Returns the URL for the bucket and path this object references,\n     *     in the form gs://<bucket>/<object-path>\n     * @override\n     */\n    toString() {\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\n    }\n    _newRef(service, location) {\n        return new Reference(service, location);\n    }\n    /**\n     * A reference to the root of this object's bucket.\n     */\n    get root() {\n        const location = new Location(this._location.bucket, '');\n        return this._newRef(this._service, location);\n    }\n    /**\n     * The name of the bucket containing this reference's object.\n     */\n    get bucket() {\n        return this._location.bucket;\n    }\n    /**\n     * The full path of this object.\n     */\n    get fullPath() {\n        return this._location.path;\n    }\n    /**\n     * The short name of this object, which is the last component of the full path.\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n     */\n    get name() {\n        return lastComponent(this._location.path);\n    }\n    /**\n     * The `StorageService` instance this `StorageReference` is associated with.\n     */\n    get storage() {\n        return this._service;\n    }\n    /**\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n     * this reference is the root.\n     */\n    get parent() {\n        const newPath = parent(this._location.path);\n        if (newPath === null) {\n            return null;\n        }\n        const location = new Location(this._location.bucket, newPath);\n        return new Reference(this._service, location);\n    }\n    /**\n     * Utility function to throw an error in methods that do not accept a root reference.\n     */\n    _throwIfRoot(name) {\n        if (this._location.path === '') {\n            throw invalidRootOperation(name);\n        }\n    }\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n    ref._throwIfRoot('getBytes');\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\n        .then(bytes => maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n            bytes.slice(0, maxDownloadSizeBytes)\n        : bytes);\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n    ref._throwIfRoot('getBlob');\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\n        .then(blob => maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n            blob.slice(0, maxDownloadSizeBytes)\n        : blob);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadBytes$1(ref, data, metadata) {\n    ref._throwIfRoot('uploadBytes');\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newTextConnection)\n        .then(finalMetadata => {\n        return {\n            metadata: finalMetadata,\n            ref\n        };\n    });\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n    ref._throwIfRoot('uploadBytesResumable');\n    return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n    ref._throwIfRoot('uploadString');\n    const data = dataFromString(format, value);\n    const metadataClone = Object.assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n        metadataClone['contentType'] = data.contentType;\n    }\n    return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nfunction listAll$1(ref) {\n    const accumulator = {\n        prefixes: [],\n        items: []\n    };\n    return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(ref, accumulator, pageToken) {\n    const opt = {\n        // maxResults is 1000 by default.\n        pageToken\n    };\n    const nextPage = await list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n    if (nextPage.nextPageToken != null) {\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nfunction list$1(ref, options) {\n    if (options != null) {\n        if (typeof options.maxResults === 'number') {\n            validateNumber('options.maxResults', \n            /* minValue= */ 1, \n            /* maxValue= */ 1000, options.maxResults);\n        }\n    }\n    const op = options || {};\n    const requestInfo = list$2(ref.storage, ref._location, \n    /*delimiter= */ '/', op.pageToken, op.maxResults);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nfunction getMetadata$1(ref) {\n    ref._throwIfRoot('getMetadata');\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nfunction updateMetadata$1(ref, metadata) {\n    ref._throwIfRoot('updateMetadata');\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nfunction getDownloadURL$1(ref) {\n    ref._throwIfRoot('getDownloadURL');\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newTextConnection)\n        .then(url => {\n        if (url === null) {\n            throw noDownloadURL();\n        }\n        return url;\n    });\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nfunction deleteObject$1(ref) {\n    ref._throwIfRoot('deleteObject');\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nfunction _getChild$1(ref, childPath) {\n    const newPath = child(ref._location.path, childPath);\n    const location = new Location(ref._location.bucket, newPath);\n    return new Reference(ref.storage, location);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isUrl(path) {\n    return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service, url) {\n    return new Reference(service, url);\n}\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(ref, path) {\n    if (ref instanceof FirebaseStorageImpl) {\n        const service = ref;\n        if (service._bucket == null) {\n            throw noDefaultBucket();\n        }\n        const reference = new Reference(service, service._bucket);\n        if (path != null) {\n            return refFromPath(reference, path);\n        }\n        else {\n            return reference;\n        }\n    }\n    else {\n        // ref is a Reference\n        if (path !== undefined) {\n            return _getChild$1(ref, path);\n        }\n        else {\n            return ref;\n        }\n    }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n    if (pathOrUrl && isUrl(pathOrUrl)) {\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\n            return refFromURL(serviceOrRef, pathOrUrl);\n        }\n        else {\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n        }\n    }\n    else {\n        return refFromPath(serviceOrRef, pathOrUrl);\n    }\n}\nfunction extractBucket(host, config) {\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n    if (bucketString == null) {\n        return null;\n    }\n    return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n    storage.host = `${host}:${port}`;\n    storage._protocol = 'http';\n    const { mockUserToken } = options;\n    if (mockUserToken) {\n        storage._overrideAuthToken =\n            typeof mockUserToken === 'string'\n                ? mockUserToken\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\n    }\n}\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nclass FirebaseStorageImpl {\n    constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    app, _authProvider, \n    /**\n     * @internal\n     */\n    _appCheckProvider, \n    /**\n     * @internal\n     */\n    _url, _firebaseVersion) {\n        this.app = app;\n        this._authProvider = _authProvider;\n        this._appCheckProvider = _appCheckProvider;\n        this._url = _url;\n        this._firebaseVersion = _firebaseVersion;\n        this._bucket = null;\n        /**\n         * This string can be in the formats:\n         * - host\n         * - host:port\n         */\n        this._host = DEFAULT_HOST;\n        this._protocol = 'https';\n        this._appId = null;\n        this._deleted = false;\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n        this._requests = new Set();\n        if (_url != null) {\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\n        }\n        else {\n            this._bucket = extractBucket(this._host, this.app.options);\n        }\n    }\n    /**\n     * The host string for this service, in the form of `host` or\n     * `host:port`.\n     */\n    get host() {\n        return this._host;\n    }\n    set host(host) {\n        this._host = host;\n        if (this._url != null) {\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\n        }\n        else {\n            this._bucket = extractBucket(host, this.app.options);\n        }\n    }\n    /**\n     * The maximum time to retry uploads in milliseconds.\n     */\n    get maxUploadRetryTime() {\n        return this._maxUploadRetryTime;\n    }\n    set maxUploadRetryTime(time) {\n        validateNumber('time', \n        /* minValue=*/ 0, \n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\n        this._maxUploadRetryTime = time;\n    }\n    /**\n     * The maximum time to retry operations other than uploads or downloads in\n     * milliseconds.\n     */\n    get maxOperationRetryTime() {\n        return this._maxOperationRetryTime;\n    }\n    set maxOperationRetryTime(time) {\n        validateNumber('time', \n        /* minValue=*/ 0, \n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\n        this._maxOperationRetryTime = time;\n    }\n    async _getAuthToken() {\n        if (this._overrideAuthToken) {\n            return this._overrideAuthToken;\n        }\n        const auth = this._authProvider.getImmediate({ optional: true });\n        if (auth) {\n            const tokenData = await auth.getToken();\n            if (tokenData !== null) {\n                return tokenData.accessToken;\n            }\n        }\n        return null;\n    }\n    async _getAppCheckToken() {\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n        if (appCheck) {\n            const result = await appCheck.getToken();\n            // TODO: What do we want to do if there is an error getting the token?\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            return result.token;\n        }\n        return null;\n    }\n    /**\n     * Stop running requests and prevent more from being created.\n     */\n    _delete() {\n        if (!this._deleted) {\n            this._deleted = true;\n            this._requests.forEach(request => request.cancel());\n            this._requests.clear();\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\n     * at the given Location.\n     */\n    _makeStorageReference(loc) {\n        return new Reference(this, loc);\n    }\n    /**\n     * @param requestInfo - HTTP RequestInfo object\n     * @param authToken - Firebase auth token\n     */\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n        if (!this._deleted) {\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\n            this._requests.add(request);\n            // Request removes itself from set when complete.\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n            return request;\n        }\n        else {\n            return new FailRequest(appDeleted());\n        }\n    }\n    async makeRequestWithTokens(requestInfo, requestFactory) {\n        const [authToken, appCheckToken] = await Promise.all([\n            this._getAuthToken(),\n            this._getAppCheckToken()\n        ]);\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    }\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.9.9\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n    ref = getModularInstance(ref);\n    return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadBytes(ref, data, metadata) {\n    ref = getModularInstance(ref);\n    return uploadBytes$1(ref, data, metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadString(ref, value, format, metadata) {\n    ref = getModularInstance(ref);\n    return uploadString$1(ref, value, format, metadata);\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n    ref = getModularInstance(ref);\n    return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nfunction getMetadata(ref) {\n    ref = getModularInstance(ref);\n    return getMetadata$1(ref);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nfunction updateMetadata(ref, metadata) {\n    ref = getModularInstance(ref);\n    return updateMetadata$1(ref, metadata);\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nfunction list(ref, options) {\n    ref = getModularInstance(ref);\n    return list$1(ref, options);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nfunction listAll(ref) {\n    ref = getModularInstance(ref);\n    return listAll$1(ref);\n}\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nfunction getDownloadURL(ref) {\n    ref = getModularInstance(ref);\n    return getDownloadURL$1(ref);\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nfunction deleteObject(ref) {\n    ref = getModularInstance(ref);\n    return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n    serviceOrRef = getModularInstance(serviceOrRef);\n    return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\n * @internal\n */\nfunction _getChild(ref, childPath) {\n    return _getChild$1(ref, childPath);\n}\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nfunction getStorage(app = getApp(), bucketUrl) {\n    app = getModularInstance(app);\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\n    const storageInstance = storageProvider.getImmediate({\n        identifier: bucketUrl\n    });\n    return storageInstance;\n}\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n    connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n    ref = getModularInstance(ref);\n    return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n    throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\nfunction factory(container, { instanceIdentifier: url }) {\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n    registerVersion(name, version, '');\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n    registerVersion(name, version, 'esm2017');\n}\nregisterStorage();\n\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"]},"metadata":{},"sourceType":"module"}